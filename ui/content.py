def create_content_area(self):
        """Content area'yƒ± olu≈ütur"""
        self.configure(style='Content.TFrame')
        
        # Ana container
        main_container = ttk.Frame(self, style='ContentContainer.TFrame')
        main_container.pack(fill=tk.BOTH, expand=True, padx=20, pady=20)
        
        # √úst b√∂l√ºm - Drop zone ve file list
        self.create_upper_section(main_container)
        
        # Orta b√∂l√ºm - Options panel
        self.create_middle_section(main_container)
        
        # Alt b√∂l√ºm - Progress ve results
        self.create_lower_section(main_container)
        
        # Varsayƒ±lan g√∂r√ºn√ºm√º ayarla
        self.show_welcome_view()
    
    def create_upper_section(self, parent):
        """√úst b√∂l√ºm olu≈ütur"""
        upper_frame = ttk.Frame(parent, style='UpperSection.TFrame')
        upper_frame.pack(fill=tk.BOTH, expand=True, pady=(0, 20))
        
        # Drop zone
        self.create_drop_zone(upper_frame)
        
        # File list (ba≈ülangƒ±√ßta gizli)
        self.create_file_list(upper_frame)
    
    def create_drop_zone(self, parent):
        """Dosya s√ºr√ºkle-bƒ±rak alanƒ± olu≈ütur"""
        self.drop_zone = ttk.Frame(parent, style='DropZone.TFrame')
        self.drop_zone.pack(fill=tk.BOTH, expand=True)
        
        # Drop zone i√ßeriƒüi
        drop_content = ttk.Frame(self.drop_zone, style='DropZoneContent.TFrame')
        drop_content.place(relx=0.5, rely=0.5, anchor='center')
        
        # Drop ikonu
        self.drop_icon = tk.Canvas(
            drop_content,
            width=64,
            height=64,
            highlightthickness=0,
            relief='flat'
        )
        self.drop_icon.pack(pady=(0, 16))
        
        self.create_drop_icon()
        
        # Ana mesaj
        self.drop_title = ttk.Label(
            drop_content,
            text="PDF dosyalarƒ±nƒ±zƒ± buraya s√ºr√ºkleyin",
            style='DropTitle.TLabel'
        )
        self.drop_title.pack(pady=(0, 8))
        
        # Alt mesaj
        self.drop_subtitle = ttk.Label(
            drop_content,
            text="veya dosya se√ßmek i√ßin tƒ±klayƒ±n",
            style='DropSubtitle.TLabel'
        )
        self.drop_subtitle.pack(pady=(0, 20))
        
        # Dosya se√ßme butonu
        select_btn = ttk.Button(
            drop_content,
            text="üìÅ Dosya Se√ß",
            style='SelectFile.TButton',
            command=self.open_files_dialog
        )
        select_btn.pack(pady=(0, 10))
        
        # Desteklenen formatlar
        formats_label = ttk.Label(
            drop_content,
            text="Desteklenen: PDF, DOC, DOCX, JPG, PNG, TIFF",
            style='FormatsLabel.TLabel'
        )
        formats_label.pack()
        
        # Drop zone tƒ±klama olayƒ±
        self.drop_zone.bind('<Button-1>', lambda e: self.open_files_dialog())
        self.add_drop_zone_bindings()
    
    def create_drop_icon(self):
        """Drop ikonu olu≈ütur"""
        self.drop_icon.delete("all")
        
        # Animasyonlu dosya ikonu
        # Dƒ±≈ü √ßer√ßeve
        self.drop_icon.create_rectangle(
            16, 20, 48, 56,
            outline='#3b82f6',
            width=2,
            fill='',
            tags='file_outline'
        )
        
        # Dosya k√∂≈üesi
        self.drop_icon.create_polygon(
            38, 20, 48, 30, 38, 30,
            outline='#3b82f6',
            fill='#dbeafe',
            width=2,
            tags='file_corner'
        )
        
        # ƒ∞√ß √ßizgiler
        for i, y in enumerate([35, 40, 45]):
            self.drop_icon.create_line(
                22, y, 42, y,
                fill='#3b82f6',
                width=1,
                tags=f'file_line_{i}'
            )
        
        # Animasyon ba≈ülat
        self.animate_drop_icon()
    
    def animate_drop_icon(self):
        """Drop ikonu animasyonu"""
        def pulse():
            # Pulse efekti
            for scale in [1.0, 1.1, 1.0]:
                self.drop_icon.after(500, lambda s=scale: self.scale_drop_icon(s))
        
        # 3 saniyede bir tekrarla
        self.drop_icon.after(3000, pulse)
        pulse()
    
    def scale_drop_icon(self, scale):
        """Drop ikonu √∂l√ßeklendir"""
        try:
            self.drop_icon.scale("all", 32, 32, scale, scale)
        except tk.TclError:
            pass
    
    def add_drop_zone_bindings(self):
        """Drop zone olaylarƒ± ekle"""
        # Drag enter
        def on_drag_enter(event):
            self.drop_zone.configure(style='DropZoneHover.TFrame')
            self.animate_drop_zone_enter()
        
        # Drag leave
        def on_drag_leave(event):
            self.drop_zone.configure(style='DropZone.TFrame')
            self.animate_drop_zone_leave()
        
        # Drop
        def on_drop(event):
            files = event.data.split(' ')
            self.handle_dropped_files(files)
        
        # Mouse enter/leave
        self.drop_zone.bind('<Enter>', on_drag_enter)
        self.drop_zone.bind('<Leave>', on_drag_leave)
        
        # Drag and drop bindings (tkinterdnd2 gerekli)
        try:
            self.drop_zone.drop_target_register('DND_Files')
            self.drop_zone.dnd_bind('<<DropEnter>>', on_drag_enter)
            self.drop_zone.dnd_bind('<<DropLeave>>', on_drag_leave)
            self.drop_zone.dnd_bind('<<Drop>>', on_drop)
        except:
            pass  # DnD desteklenmiyorsa sessizce ge√ß
    
    def create_file_list(self, parent):
        """Dosya listesi olu≈ütur"""
        self.file_list_frame = ttk.Frame(parent, style='FileList.TFrame')
        # Ba≈ülangƒ±√ßta gizli
        
        # Ba≈ülƒ±k
        list_header = ttk.Frame(self.file_list_frame, style='FileListHeader.TFrame')
        list_header.pack(fill=tk.X, pady=(0, 10))
        
        title_label = ttk.Label(
            list_header,
            text="Se√ßilen Dosyalar",
            style='FileListTitle.TLabel'
        )
        title_label.pack(side=tk.LEFT)
        
        # Temizle butonu
        clear_btn = ttk.Button(
            list_header,
            text="üóëÔ∏è Temizle",
            style='ClearFiles.TButton',
            command=self.clear_files
        )
        clear_btn.pack(side=tk.RIGHT)
        
        # Dosya ekleme butonu
        add_btn = ttk.Button(
            list_header,
            text="‚ûï Dosya Ekle",
            style='AddFiles.TButton',
            command=self.open_files_dialog
        )
        add_btn.pack(side=tk.RIGHT, padx=(0, 10))
        
        # Scrollable dosya listesi
        self.create_scrollable_file_list()
    
    def create_scrollable_file_list(self):
        """Kaydƒ±rƒ±labilir dosya listesi"""
        # Frame ve scrollbar
        list_container = ttk.Frame(self.file_list_frame, style='FileListContainer.TFrame')
        list_container.pack(fill=tk.BOTH, expand=True)
        
        # Canvas ve scrollbar
        self.files_canvas = tk.Canvas(
            list_container,
            highlightthickness=0,
            relief='flat',
            height=200
        )
        
        files_scrollbar = ttk.Scrollbar(
            list_container,
            orient='vertical',
            command=self.files_canvas.yview
        )
        
        self.files_scrollable_frame = ttk.Frame(self.files_canvas)
        
        # Layout
        self.files_canvas.pack(side=tk.LEFT, fill=tk.BOTH, expand=True)
        files_scrollbar.pack(side=tk.RIGHT, fill=tk.Y)
        
        # Canvas ayarlarƒ±
        self.files_canvas.configure(yscrollcommand=files_scrollbar.set)
        
        # Scrollable frame'i canvas'a ekle
        canvas_frame = self.files_canvas.create_window(
            (0, 0),
            window=self.files_scrollable_frame,
            anchor='nw'
        )
        
        # Scroll region g√ºncelleme
        def configure_scroll_region(event):
            self.files_canvas.configure(scrollregion=self.files_canvas.bbox('all'))
        
        def configure_canvas_width(event):
            canvas_width = event.width
            self.files_canvas.itemconfig(canvas_frame, width=canvas_width)
        
        self.files_scrollable_frame.bind('<Configure>', configure_scroll_region)
        self.files_canvas.bind('<Configure>', configure_canvas_width)
        
        # Mouse wheel scrolling
        def on_mousewheel(event):
            self.files_canvas.yview_scroll(int(-1 * (event.delta / 120)), "units")
        
        self.files_canvas.bind("<MouseWheel>", on_mousewheel)
    
    def create_middle_section(self, parent):
        """Orta b√∂l√ºm - Options panel"""
        self.options_panel = ttk.Frame(parent, style='OptionsPanel.TFrame')
        # Ba≈ülangƒ±√ßta gizli
        
        # Panel ba≈ülƒ±ƒüƒ±
        options_header = ttk.Frame(self.options_panel, style='OptionsPanelHeader.TFrame')
        options_header.pack(fill=tk.X, pady=(0, 15))
        
        self.options_title = ttk.Label(
            options_header,
            text="ƒ∞≈ülem Ayarlarƒ±",
            style='OptionsPanelTitle.TLabel'
        )
        self.options_title.pack(side=tk.LEFT)
        
        # ƒ∞≈ülem se√ßici
        operation_frame = ttk.Frame(options_header, style='OperationFrame.TFrame')
        operation_frame.pack(side=tk.RIGHT)
        
        ttk.Label(
            operation_frame,
            text="ƒ∞≈ülem:",
            style='OperationLabel.TLabel'
        ).pack(side=tk.LEFT, padx=(0, 5))
        
        self.operation_var = tk.StringVar()
        self.operation_combo = ttk.Combobox(
            operation_frame,
            textvariable=self.operation_var,
            state='readonly',
            style='Operation.TCombobox'
        )
        self.operation_combo.pack(side=tk.LEFT)
        self.operation_combo.bind('<<ComboboxSelected>>', self.on_operation_change)
        
        # Dinamik options container
        self.dynamic_options = ttk.Frame(self.options_panel, style='DynamicOptions.TFrame')
        self.dynamic_options.pack(fill=tk.X, pady=(0, 15))
        
        # Action buttons
        self.create_action_buttons()
    
    def create_action_buttons(self):
        """Aksiyon butonlarƒ± olu≈ütur"""
        actions_frame = ttk.Frame(self.options_panel, style='ActionsFrame.TFrame')
        actions_frame.pack(fill=tk.X)
        
        # Sol taraf - Output directory
        output_frame = ttk.Frame(actions_frame, style='OutputFrame.TFrame')
        output_frame.pack(side=tk.LEFT, fill=tk.X, expand=True)
        
        ttk.Label(
            output_frame,
            text="√áƒ±ktƒ± Klas√∂r√º:",
            style='OutputLabel.TLabel'
        ).pack(side=tk.LEFT, padx=(0, 10))
        
        self.output_var = tk.StringVar()
        self.output_var.set(self.config_manager.get('pdf_processing.output_directory', '~/Desktop'))
        
        output_entry = ttk.Entry(
            output_frame,
            textvariable=self.output_var,
            style='OutputPath.TEntry'
        )
        output_entry.pack(side=tk.LEFT, fill=tk.X, expand=True, padx=(0, 10))
        
        browse_btn = ttk.Button(
            output_frame,
            text="üìÅ",
            style='BrowseOutput.TButton',
            width=3,
            command=self.browse_output_directory
        )
        browse_btn.pack(side=tk.RIGHT)
        
        # Saƒü taraf - Process button
        self.process_btn = ttk.Button(
            actions_frame,
            text="üöÄ ƒ∞≈ülemi Ba≈ülat",
            style='ProcessButton.TButton',
            command=self.start_processing
        )
        self.process_btn.pack(side=tk.RIGHT, padx=(20, 0))
    
    def create_lower_section(self, parent):
        """Alt b√∂l√ºm - Progress ve results"""
        lower_frame = ttk.Frame(parent, style='LowerSection.TFrame')
        lower_frame.pack(fill=tk.X, pady=(20, 0))
        
        # Progress panel
        self.create_progress_panel(lower_frame)
        
        # Results panel
        self.create_results_panel(lower_frame)
    
    def create_progress_panel(self, parent):
        """Progress panel olu≈ütur"""
        self.progress_panel = ttk.Frame(parent, style='ProgressPanel.TFrame')
        # Ba≈ülangƒ±√ßta gizli
        
        # Progress header
        progress_header = ttk.Frame(self.progress_panel, style='ProgressHeader.TFrame')
        progress_header.pack(fill=tk.X, pady=(0, 10))
        
        self.progress_title = ttk.Label(
            progress_header,
            text="ƒ∞≈ülem Durumu",
            style='ProgressTitle.TLabel'
        )
        self.progress_title.pack(side=tk.LEFT)
        
        # Cancel button
        self.cancel_btn = ttk.Button(
            progress_header,
            text="‚ùå ƒ∞ptal",
            style='CancelButton.TButton',
            command=self.cancel_processing
        )
        self.cancel_btn.pack(side=tk.RIGHT)
        
        # Progress bars container
        progress_container = ttk.Frame(self.progress_panel, style='ProgressContainer.TFrame')
        progress_container.pack(fill=tk.X, pady=(0, 10))
        
        # Ana progress bar
        self.main_progress_var = tk.DoubleVar()
        self.main_progress = ttk.Progressbar(
            progress_container,
            variable=self.main_progress_var,
            maximum=100,
            style='Main.Horizontal.TProgressbar'
        )
        self.main_progress.pack(fill=tk.X, pady=(0, 5))
        
        # Progress text
        self.progress_text = ttk.Label(
            progress_container,
            text="Hazƒ±rlanƒ±yor...",
            style='ProgressText.TLabel'
        )
        self.progress_text.pack(anchor='w')
        
        # Detaylƒ± progress (dosya bazƒ±nda)
        self.file_progress_frame = ttk.Frame(progress_container, style='FileProgress.TFrame')
        self.file_progress_frame.pack(fill=tk.X, pady=(10, 0))
        
        # ƒ∞statistikler
        stats_frame = ttk.Frame(self.progress_panel, style='StatsFrame.TFrame')
        stats_frame.pack(fill=tk.X)
        
        self.stats_labels = {}
        stats_items = [
            ('processed', 'ƒ∞≈ülenen: 0'),
            ('remaining', 'Kalan: 0'),
            ('errors', 'Hata: 0'),
            ('speed', 'Hƒ±z: 0 MB/s'),
            ('eta', 'Tahmini: --:--')
        ]
        
        for stat_id, initial_text in stats_items:
            label = ttk.Label(
                stats_frame,
                text=initial_text,
                style='StatsLabel.TLabel'
            )
            label.pack(side=tk.LEFT, padx=(0, 20))
            self.stats_labels[stat_id] = label
    
    def create_results_panel(self, parent):
        """Results panel olu≈ütur"""
        self.results_panel = ttk.Frame(parent, style='ResultsPanel.TFrame')
        # Ba≈ülangƒ±√ßta gizli
        
        # Results header
        results_header = ttk.Frame(self.results_panel, style='ResultsHeader.TFrame')
        results_header.pack(fill=tk.X, pady=(0, 10))
        
        results_title = ttk.Label(
            results_header,
            text="ƒ∞≈ülem Sonu√ßlarƒ±",
            style='ResultsTitle.TLabel'
        )
        results_title.pack(side=tk.LEFT)
        
        # Export results button
        export_btn = ttk.Button(
            results_header,
            text="üíæ Rapor Kaydet",
            style='ExportResults.TButton',
            command=self.export_results
        )
        export_btn.pack(side=tk.RIGHT)
        
        # Open output folder button
        open_folder_btn = ttk.Button(
            results_header,
            text="üìÅ Klas√∂r√º A√ß",
            style='OpenFolder.TButton',
            command=self.open_output_folder
        )
        open_folder_btn.pack(side=tk.RIGHT, padx=(0, 10))
        
        # Results treeview
        self.create_results_treeview()
    
    def create_results_treeview(self):
        """Results treeview olu≈ütur"""
        tree_container = ttk.Frame(self.results_panel, style='TreeContainer.TFrame')
        tree_container.pack(fill=tk.BOTH, expand=True)
        
        # Treeview ve scrollbar
        self.results_tree = ttk.Treeview(
            tree_container,
            style='Results.Treeview',
            columns=('file', 'operation', 'status', 'size', 'time'),
            show='headings',
            height=8
        )
        
        results_v_scrollbar = ttk.Scrollbar(
            tree_container,
            orient='vertical',
            command=self.results_tree.yview
        )
        
        results_h_scrollbar = ttk.Scrollbar(
            tree_container,
            orient='horizontal',
            command=self.results_tree.xview
        )
        
        # Layout
        self.results_tree.grid(row=0, column=0, sticky='nsew')
        results_v_scrollbar.grid(row=0, column=1, sticky='ns')
        results_h_scrollbar.grid(row=1, column=0, sticky='ew')
        
        tree_container.grid_rowconfigure(0, weight=1)
        tree_container.grid_columnconfigure(0, weight=1)
        
        # Scrollbar baƒülantƒ±larƒ±
        self.results_tree.configure(
            yscrollcommand=results_v_scrollbar.set,
            xscrollcommand=results_h_scrollbar.set
        )
        
        # S√ºtun ayarlarƒ±
        columns = {
            'file': ('Dosya', 200),
            'operation': ('ƒ∞≈ülem', 100),
            'status': ('Durum', 80),
            'size': ('Boyut', 80),
            'time': ('S√ºre', 80)
        }
        
        for col_id, (heading, width) in columns.items():
            self.results_tree.heading(col_id, text=heading)
            self.results_tree.column(col_id, width=width, minwidth=50)
        
        # √áift tƒ±klama olayƒ±
        self.results_tree.bind('<Double-1>', self.on_result_double_click)
    
    def setup_drag_and_drop(self):
        """Drag and drop sistemi ayarla"""
        try:
            import tkinterdnd2 as tkdnd
            
            # Drop zone'u DnD uyumlu yap
            self.drop_zone.drop_target_register('DND_Files')
            
            def handle_drop(event):
                files = self.parse_drop_data(event.data)
                self.handle_dropped_files(files)
            
            self.drop_zone.dnd_bind('<<Drop>>', handle_drop)
            
        except ImportError:
            # DnD desteƒüi yok, sadece click-to-select
            pass
    
    def parse_drop_data(self, data):
        """Drop data'sƒ±nƒ± parse et"""
        if isinstance(data, str):
            # Windows ve Unix path'lerini handle et
            if data.startswith('{') and data.endswith('}'):
                # Windows path with spaces
                return [data[1:-1]]
            else:
                # Multiple files or Unix paths
                return data.split()
        return []
    
    def bind_dnd_events(self):
        """DnD eventlerini bind et"""
        # Header'dan √ßaƒürƒ±lacak
        pass
    
    # Event Handlers
    def animate_drop_zone_enter(self):
        """Drop zone'a girerken animasyon"""
        self.drop_title.configure(text="Dosyalarƒ± bƒ±rakƒ±n!")
        self.animate_drop_icon_hover()
    
    def animate_drop_zone_leave(self):
        """Drop zone'dan √ßƒ±karken animasyon"""
        self.drop_title.configure(text="PDF dosyalarƒ±nƒ±zƒ± buraya s√ºr√ºkleyin")
    
    def animate_drop_icon_hover(self):
        """Drop icon hover animasyonu"""
        # ƒ∞konu b√ºy√ºt
        self.scale_drop_icon(1.2)
        self.drop_zone.after(200, lambda: self.scale_drop_icon(1.0))
    
    def handle_dropped_files(self, files):
        """Bƒ±rakƒ±lan dosyalarƒ± i≈üle"""
        valid_files = []
        
        for file_path in files:
            path = Path(file_path.strip('"\''))
            
            if path.exists() and path.is_file():
                # Desteklenen format kontrol√º
                if self.is_supported_file(path):
                    valid_files.append(str(path))
        
        if valid_files:
            self.add_files(valid_files)
        else:
            messagebox.showwarning(
                "Uyarƒ±",
                "Desteklenmeyen dosya formatƒ±!\n\nDesteklenen formatlar:\n" +
                "PDF, DOC, DOCX, JPG, PNG, TIFF, BMP"
            )
    
    def is_supported_file(self, file_path):
        """Dosya formatƒ± destekleniyor mu?"""
        supported_extensions = {
            '.pdf', '.doc', '.docx', '.jpg', '.jpeg', '.png', 
            '.tiff', '.tif', '.bmp', '.gif', '.webp'
        }
        return file_path.suffix.lower() in supported_extensions
    
    def open_files_dialog(self):
        """Dosya se√ßme diyalogu"""
        filetypes = [
            ('PDF Dosyalarƒ±', '*.pdf'),
            ('Word Dosyalarƒ±', '*.doc *.docx'),
            ('Resim Dosyalarƒ±', '*.jpg *.jpeg *.png *.tiff *.tif *.bmp *.gif'),
            ('T√ºm Dosyalar', '*.*')
        ]
        
        initial_dir = self.config_manager.get('ui.last_open_directory', os.path.expanduser('~'))
        
        files = filedialog.askopenfilenames(
            title="PDF Dosyalarƒ± Se√ßin",
            filetypes=filetypes,
            initialdir=initial_dir
        )
        
        if files:
            # Son a√ßƒ±lan dizini kaydet
            last_dir = os.path.dirname(files[0])
            self.config_manager.set('ui.last_open_directory', last_dir)
            self.config_manager.save()
            
            self.add_files(files)
    
    def add_files(self, files):
        """Dosyalarƒ± listeye ekle"""
        new_files = []
        
        for file_path in files:
            if file_path not in self.selected_files:
                self.selected_files.append(file_path)
                new_files.append(file_path)
        
        if new_files:
            self.update_file_list_display()
            self.show_file_list()
            self.animate_file_addition(len(new_files))
    
    def update_file_list_display(self):
        """Dosya listesi g√∂r√ºnt√ºs√ºn√º g√ºncelle"""
        # Mevcut √∂ƒüeleri temizle
        for widget in self.files_scrollable_frame.winfo_children():
            widget.destroy()
        
        # Her dosya i√ßin satƒ±r olu≈ütur
        for i, file_path in enumerate(self.selected_files):
            self.create_file_item(self.files_scrollable_frame, file_path, i)
    
    def create_file_item(self, parent, file_path, index):
        """Dosya √∂ƒüesi olu≈ütur"""
        path = Path(file_path)
        
        # Ana frame
        item_frame = ttk.Frame(parent, style='FileItem.TFrame')
        item_frame.pack(fill=tk.X, pady=2)
        
        # Sol taraf - ikon ve bilgiler
        left_frame = ttk.Frame(item_frame, style='FileItemLeft.TFrame')
        left_frame.pack(side=tk.LEFT, fill=tk.X, expand=True, padx=10, pady=8)
        
        # Dosya ikonu
        icon = self.get_file_icon(path.suffix.lower())
        icon_label = ttk.Label(
            left_frame,
            text=icon,
            style='FileIcon.TLabel'
        )
        icon_label.pack(side=tk.LEFT, padx=(0, 10))
        
        # Dosya bilgileri
        info_frame = ttk.Frame(left_frame, style='FileInfo.TFrame')
        info_frame.pack(side=tk.LEFT, fill=tk.X, expand=True)
        
        # Dosya adƒ±
        name_label = ttk.Label(
            info_frame,
            text=path.name,
            style='FileName.TLabel'
        )
        name_label.pack(anchor='w')
        
        # Dosya yolu ve boyutu
        try:
            size = path.stat().st_size
            size_str = self.format_file_size(size)
        except:
            size_str = "Bilinmiyor"
        
        details_text = f"{path.parent} ‚Ä¢ {size_str}"
        details_label = ttk.Label(
            info_frame,
            text=details_text,
            style='FileDetails.TLabel'
        )
        details_label.pack(anchor='w')
        
        # Saƒü taraf - aksiyonlar
        right_frame = ttk.Frame(item_frame, style='FileItemRight.TFrame')
        right_frame.pack(side=tk.RIGHT, padx=10)
        
        # Kaldƒ±r butonu
        remove_btn = ttk.Button(
            right_frame,
            text="üóëÔ∏è",
            style='RemoveFile.TButton',
            width=3,
            command=lambda idx=index: self.remove_file(idx)
        )
        remove_btn.pack(side=tk.RIGHT)
        
        # √ñnizleme butonu (PDF i√ßin)
        if path.suffix.lower() == '.pdf':
            preview_btn = ttk.Button(
                right_frame,
                text="üëÅÔ∏è",
                style='PreviewFile.TButton',
                width=3,
                command=lambda fp=file_path: self.preview_file(fp)
            )
            preview_btn.pack(side=tk.RIGHT, padx=(0, 5))
        
        # Hover efekti
        self.add_file_item_hover(item_frame)
    
    def get_file_icon(self, extension):
        """Dosya t√ºr√ºne g√∂re ikon d√∂nd√ºr"""
        icons = {
            '.pdf': 'üìÑ',
            '.doc': 'üìù', '.docx': 'üìù',
            '.jpg': 'üñºÔ∏è', '.jpeg': 'üñºÔ∏è', '.png': 'üñºÔ∏è',
            '.tiff': 'üñºÔ∏è', '.tif': 'üñºÔ∏è', '.bmp': 'üñºÔ∏è',
            '.gif': 'üñºÔ∏è', '.webp': 'üñºÔ∏è'
        }
        return icons.get(extension, 'üìé')
    
    def format_file_size(self, size):
        """Dosya boyutunu format et"""
        for unit in ['B', 'KB', 'MB', 'GB']:
            if size < 1024:
                return f"{size:.1f} {unit}"
            size /= 1024
        return f"{size:.1f} TB"
    
    def add_file_item_hover(self, item_frame):
        """Dosya √∂ƒüesi hover efekti"""
        original_style = item_frame.cget('style')
        
        def on_enter(event):
            item_frame.configure(style='FileItemHover.TFrame')
        
        def on_leave(event):
            item_frame.configure(style=original_style)
        
        item_frame.bind('<Enter>', on_enter)
        item_frame.bind('<Leave>', on_leave)
        
        # Alt widget'lara da bind et
        for child in item_frame.winfo_children():
            child.bind('<Enter>', on_enter)
            child.bind('<Leave>', on_leave)
    
    def remove_file(self, index):
        """Dosyayƒ± listeden kaldƒ±r"""
        if 0 <= index < len(self.selected_files):
            removed_file = self.selected_files.pop(index)
            self.update_file_list_display()
            
            # Liste bo≈üsa drop zone'u g√∂ster
            if not self.selected_files:
                self.show_welcome_view()
    
    def clear_files(self):
        """T√ºm dosyalarƒ± temizle"""
        self.selected_files.clear()
        self.show_welcome_view()
    
    def preview_file(self, file_path):
        """Dosya √∂nizlemesi g√∂ster"""
        try:
            if hasattr(self.app_instance, 'pdf_viewer'):
                self.app_instance.pdf_viewer.open_file(file_path)
            else:
                messagebox.showinfo("Bilgi", "PDF okuyucu hen√ºz mevcut deƒüil")
        except Exception as e:
            messagebox.showerror("Hata", f"Dosya a√ßƒ±lamadƒ±: {e}")
    
    def animate_file_addition(self, count):
        """Dosya ekleme animasyonu"""
        # Ba≈üarƒ± mesajƒ± g√∂ster
        self.show_notification(f"‚úÖ {count} dosya eklendi", "success")
    
    def show_notification(self, message, type_="info"):
        """Bildirim g√∂ster"""
        # Basit notification sistemi
        notification = tk.Toplevel(self.winfo_toplevel())
        notification.overrideredirect(True)
        notification.configure(bg='green' if type_ == "success" else 'blue')
        
        label = ttk.Label(
            notification,
            text=message,
            background='green' if type_ == "success" else 'blue',
            foreground='white',
            padding=10
        )
        label.pack()
        
        # Konumlandƒ±r
        x = self.winfo_toplevel().winfo_x() + 50
        y = self.winfo_toplevel().winfo_y() + 50
        notification.geometry(f"+{x}+{y}")
        
        # 3 saniye sonra kapat
        notification.after(3000, notification.destroy)
    
    # View Management
    def show_welcome_view(self):
        """Kar≈üƒ±lama g√∂r√ºn√ºm√ºn√º g√∂ster"""
        self.hide_all_panels()
        self.drop_zone.pack(fill=tk.BOTH, expand=True)
    
    def show_file_list(self):
        """Dosya listesini g√∂ster"""
        self.drop_zone.pack_forget()
        self.file_list_frame.pack(fill=tk.BOTH, expand=True, pady=(0, 20))
        
        # Options panel'i g√∂ster
        if self.selected_files:
            self.show_options_panel()
    
    def show_options_panel(self):
        """Options panel'i g√∂ster"""
        self.options_panel.pack(fill=tk.X, pady=(0, 20))
        self.populate_operation_combo()
    
    def show_progress_panel(self):
        """Progress panel'i g√∂ster"""
        self.progress_panel.pack(fill=tk.X, pady=(0, 20))
    
    def show_results_panel(self):
        """Results panel'i g√∂ster"""
        self.results_panel.pack(fill=tk.X)
    
    def hide_all_panels(self):
        """T√ºm panelleri gizle"""
        for panel in [self.file_list_frame, self.options_panel, 
                     self.progress_panel, self.results_panel]:
            if panel:
                panel.pack_forget()
    
    def populate_operation_combo(self):
        """Operation combo'yu doldur"""
        operations = [
            ('merge', 'üîó PDF Birle≈ütir'),
            ('split', '‚úÇÔ∏è PDF B√∂l'),
            ('compress', 'üóúÔ∏è PDF Sƒ±kƒ±≈ütƒ±r'),
            ('convert', 'üîÑ Format D√∂n√º≈üt√ºr'),
            ('rotate', '‚Üª Sayfa D√∂nd√ºr'),
            ('extract_text', 'üìÑ Metin √áƒ±kar'),
            ('extract_images', 'üñºÔ∏è Resim √áƒ±kar'),
            ('watermark', 'üíß Filigran Ekle'),
            ('encrypt', 'üîê ≈ûifrele'),
            ('decrypt', 'üîì ≈ûifre Kaldƒ±r'),
            ('ocr', 'üëÅÔ∏è OCR Uygula'),
            ('optimize', '‚ö° Optimize Et')
        ]
        
        self.operation_combo['values'] = [op[1] for op in operations]
        
        # Varsayƒ±lan i≈ülem
        if self.current_operation:
            for i, (op_id, op_name) in enumerate(operations):
                if op_id == self.current_operation:
                    self.operation_combo.current(i)
                    break
        else:
            self.operation_combo.current(0)
        
        self.on_operation_change()
    
    def on_operation_change(self, event=None):
        """ƒ∞≈ülem deƒüi≈üikliƒüi olayƒ±"""
        selected = self.operation_combo.get()
        
        # Operation ID'sini bul
        operations = {
            'üîó PDF Birle≈ütir': 'merge',
            '‚úÇÔ∏è PDF B√∂l': 'split',
            'üóúÔ∏è PDF Sƒ±kƒ±≈ütƒ±r': 'compress',
            'üîÑ Format D√∂n√º≈üt√ºr': 'convert',
            '‚Üª Sayfa D√∂nd√ºr': 'rotate',
            'üìÑ Metin √áƒ±kar': 'extract_text',
            'üñºÔ∏è Resim √áƒ±kar': 'extract_images',
            'üíß Filigran Ekle': 'watermark',
            'üîê ≈ûifrele': 'encrypt',
            'üîì ≈ûifre Kaldƒ±r': 'decrypt',
            'üëÅÔ∏è OCR Uygula': 'ocr',
            '‚ö° Optimize Et': 'optimize'
        }
        
        self.current_operation = operations.get(selected, 'merge')
        self.update_options_panel()
    
    def update_options_panel(self):
        """Options panel'ini g√ºncelle"""
        # Mevcut dinamik se√ßenekleri temizle
        for widget in self.dynamic_options.winfo_children():
            widget.destroy()
        
        # Se√ßilen i≈üleme g√∂re se√ßenekleri olu≈ütur
        self.create_operation_options()
    
    def create_operation_options(self):
        """ƒ∞≈ülem se√ßeneklerini olu≈ütur"""
        if self.current_operation == 'merge':
            self.create_merge_options()
        elif self.current_operation == 'split':
            self.create_split_options()
        elif self.current_operation == 'compress':
            self.create_compress_options()
        elif self.current_operation == 'convert':
            self.create_convert_options()
        elif self.current_operation == 'rotate':
            self.create_rotate_options()
        elif self.current_operation == 'watermark':
            self.create_watermark_options()
        elif self.current_operation == 'encrypt':
            self.create_encrypt_options()
        elif self.current_operation == 'ocr':
            self.create_ocr_options()
        # Diƒüer i≈ülemler i√ßin benzer metodlar...
    
    def create_merge_options(self):
        """Birle≈ütirme se√ßenekleri"""
        # Birle≈ütirme sƒ±rasƒ±
        order_frame = ttk.LabelFrame(
            self.dynamic_options,
            text="Birle≈ütirme Sƒ±rasƒ±",
            style='OptionsGroup.TLabelframe'
        )
        order_frame.pack(fill=tk.X, pady=(0, 10))
        
        self.merge_order_var = tk.StringVar(value="filename")
        
        ttk.Radiobutton(
            order_frame,
            text="Dosya adƒ±na g√∂re",
            variable=self.merge_order_var,
            value="filename"
        ).pack(anchor='w', padx=10, pady=2)
        
        ttk.Radiobutton(
            order_frame,
            text="Tarih sƒ±rasƒ±na g√∂re",
            variable=self.merge_order_var,
            value="date"
        ).pack(anchor='w', padx=10, pady=2)
        
        ttk.Radiobutton(
            order_frame,
            text="Manuel sƒ±ralama",
            variable=self.merge_order_var,
            value="manual"
        ).pack(anchor='w', padx=10, pady=2)
        
        # Bookmark se√ßenekleri
        bookmark_frame = ttk.LabelFrame(
            self.dynamic_options,
            text="Bookmark Ayarlarƒ±",
            style='OptionsGroup.TLabelframe'
        )
        bookmark_frame.pack(fill=tk.X, pady=(0, 10))
        
        self.add_bookmarks_var = tk.BooleanVar(value=True)
        ttk.Checkbutton(
            bookmark_frame,
            text="Her dosya i√ßin bookmark ekle",
            variable=self.add_bookmarks_var
        ).pack(anchor='w', padx=10, pady=2)
    
    def create_split_options(self):
        """B√∂lme se√ßenekleri"""
        # B√∂lme t√ºr√º
        split_frame = ttk.LabelFrame(
            self.dynamic_options,
            text="B√∂lme T√ºr√º",
            style='OptionsGroup.TLabelframe'
        )
        split_frame.pack(fill=tk.X, pady=(0, 10))
        
        self.split_type_var = tk.StringVar(value="pages")
        
        ttk.Radiobutton(
            split_frame,
            text="Her sayfa ayrƒ± dosya",
            variable=self.split_type_var,
            value="pages"
        ).pack(anchor='w', padx=10, pady=2)
        
        ttk.Radiobutton(
            split_frame,
            text="Sayfa aralƒ±klarƒ±",
            variable=self.split_type_var,
            value="ranges"
        ).pack(anchor='w', padx=10, pady=2)
        
        ttk.Radiobutton(
            split_frame,
            text="Belirli sayfa sayƒ±sƒ±",
            variable=self.split_type_var,
            value="count"
        ).pack(anchor='w', padx=10, pady=2)
        
        # Sayfa sayƒ±sƒ± (count se√ßili olduƒüunda)
        count_frame = ttk.Frame(split_frame)
        count_frame.pack(fill=tk.X, padx=20, pady=2)
        
        ttk.Label(count_frame, text="Sayfa sayƒ±sƒ±:").pack(side=tk.LEFT)
        
        self.pages_per_file_var = tk.IntVar(value=1)
        ttk.Spinbox(
            count_frame,
            from_=1,
            to=100,
            textvariable=self.pages_per_file_var,
            width=10
        ).pack(side=tk.LEFT, padx=(5, 0))
    
    def create_compress_options(self):
        """Sƒ±kƒ±≈ütƒ±rma se√ßenekleri"""
        # Kalite se√ßenekleri
        quality_frame = ttk.LabelFrame(
            self.dynamic_options,
            text="Sƒ±kƒ±≈ütƒ±rma Kalitesi",
            style='OptionsGroup.TLabelframe'
        )
        quality_frame.pack(fill=tk.X, pady=(0, 10))
        
        self.compression_quality_var = tk.StringVar(value="medium")
        
        qualities = [
            ("high", "Y√ºksek Kalite (az sƒ±kƒ±≈ütƒ±rma)"),
            ("medium", "Orta Kalite (dengeli)"),
            ("low", "D√º≈ü√ºk Kalite (y√ºksek sƒ±kƒ±≈ütƒ±rma)")
        ]
        
        for value, text in qualities:
            ttk.Radiobutton(
                quality_frame,
                text=text,
                variable=self.compression_quality_var,
                value=value
            ).pack(anchor='w', padx=10, pady=2)
        
        # Geli≈ümi≈ü se√ßenekler
        advanced_frame = ttk.LabelFrame(
            self.dynamic_options,
            text="Geli≈ümi≈ü Se√ßenekler",
            style='OptionsGroup.TLabelframe'
        )
        advanced_frame.pack(fill=tk.X, pady=(0, 10))
        
        self.optimize_images_var = tk.BooleanVar(value=True)
        ttk.Checkbutton(
            advanced_frame,
            text="Resimleri optimize et",
            variable=self.optimize_images_var
        ).pack(anchor='w', padx=10, pady=2)
        
        self.remove_metadata_var = tk.BooleanVar(value=False)
        ttk.Checkbutton(
            advanced_frame,
            text="Metadata bilgilerini kaldƒ±r",
            variable=self.remove_metadata_var
        ).pack(anchor='w', padx=10, pady=2)
    
    def create_convert_options(self):
        """D√∂n√º≈üt√ºrme se√ßenekleri"""
        # √áƒ±ktƒ± formatƒ±
        format_frame = ttk.LabelFrame(
            self.dynamic_options,
            text="√áƒ±ktƒ± Formatƒ±",
            style='OptionsGroup.TLabelframe'
        )
        format_frame.pack(fill=tk.X, pady=(0, 10))
        
        format_inner = ttk.Frame(format_frame)
        format_inner.pack(fill=tk.X, padx=10, pady=5)
        
        ttk.Label(format_inner, text="Format:").pack(side=tk.LEFT)
        
        self.output_format_var = tk.StringVar(value="docx")
        format_combo = ttk.Combobox(
            format_inner,
            textvariable=self.output_format_var,
            values=["docx", "txt", "jpg", "png", "tiff", "html"],
            state="readonly",
            width=15
        )
        format_combo.pack(side=tk.LEFT, padx=(5, 0))
        
        # DPI ayarlarƒ± (resim formatlarƒ± i√ßin)
        dpi_frame = ttk.Frame(format_frame)
        dpi_frame.pack(fill=tk.X, padx=10, pady=5)
        
        ttk.Label(dpi_frame, text="DPI:").pack(side=tk.LEFT)
        
        self.output_dpi_var = tk.IntVar(value=300)
        ttk.Spinbox(
            dpi_frame,
            from_=72,
            to=600,
            textvariable=self.output_dpi_var,
            width=10
        ).pack(side=tk.LEFT, padx=(5, 0))
    
    def create_rotate_options(self):
        """D√∂nd√ºrme se√ßenekleri"""
        # D√∂nd√ºrme a√ßƒ±sƒ±
        rotation_frame = ttk.LabelFrame(
            self.dynamic_options,
            text="D√∂nd√ºrme A√ßƒ±sƒ±",
            style='OptionsGroup.TLabelframe'
        )
        rotation_frame.pack(fill=tk.X, pady=(0, 10))
        
        self.rotation_angle_var = tk.IntVar(value=90)
        
        angles = [(90, "90¬∞ (saat y√∂n√º)"), (180, "180¬∞"), (270, "270¬∞ (saat y√∂n√º tersi)")]
        
        for angle, text in angles:
            ttk.Radiobutton(
                rotation_frame,
                text=text,
                variable=self.rotation_angle_var,
                value=angle
            ).pack(anchor='w', padx=10, pady=2)
        
        # Sayfa se√ßimi
        pages_frame = ttk.LabelFrame(
            self.dynamic_options,
            text="Sayfa Se√ßimi",
            style='OptionsGroup.TLabelframe'
        )
        pages_frame.pack(fill=tk.X, pady=(0, 10))
        
        self.rotate_pages_var = tk.StringVar(value="all")
        
        ttk.Radiobutton(
            pages_frame,
            text="T√ºm sayfalar",
            variable=self.rotate_pages_var,
            value="all"
        ).pack(anchor='w', padx=10, pady=2)
        
        ttk.Radiobutton(
            pages_frame,
            text="Belirli sayfalar",
            variable=self.rotate_pages_var,
            value="specific"
        ).pack(anchor='w', padx=10, pady=2)
        
        # Sayfa numaralarƒ±
        specific_frame = ttk.Frame(pages_frame)
        specific_frame.pack(fill=tk.X, padx=20, pady=2)
        
        ttk.Label(specific_frame, text="Sayfalar (√∂rn: 1,3,5-10):").pack(side=tk.LEFT)
        
        self.specific_pages_var = tk.StringVar()
        ttk.Entry(
            specific_frame,
            textvariable=self.specific_pages_var,
            width=20
        ).pack(side=tk.LEFT, padx=(5, 0))
    
    def create_watermark_options(self):
        """Filigran se√ßenekleri"""
        # Filigran t√ºr√º
        type_frame = ttk.LabelFrame(
            self.dynamic_options,
            text="Filigran T√ºr√º",
            style='OptionsGroup.TLabelframe'
        )
        type_frame.pack(fill=tk.X, pady=(0, 10))
        
        self.watermark_type_var = tk.StringVar(value="text")
        
        ttk.Radiobutton(
            type_frame,
            text="Metin filigranƒ±",
            variable=self.watermark_type_var,
            value="text",
            command=self.update_watermark_options
        ).pack(anchor='w', padx=10, pady=2)
        
        ttk.Radiobutton(
            type_frame,
            text="Resim filigranƒ±",
            variable=self.watermark_type_var,
            value="image",
            command=self.update_watermark_options
        ).pack(anchor='w', padx=10, pady=2)
        
        # Dinamik i√ßerik frame
        self.watermark_content_frame = ttk.Frame(self.dynamic_options)
        self.watermark_content_frame.pack(fill=tk.X, pady=(0, 10))
        
        self.update_watermark_options()
        
        # Pozisyon se√ßenekleri
        position_frame = ttk.LabelFrame(
            self.dynamic_options,
            text="Pozisyon",
            style='OptionsGroup.TLabelframe'
        )
        position_frame.pack(fill=tk.X, pady=(0, 10))
        
        positions_grid = ttk.Frame(position_frame)
        positions_grid.pack(padx=10, pady=5)
        
        self.watermark_position_var = tk.StringVar(value="center")
        
        positions = [
            ("top-left", "Sol √úst", 0, 0),
            ("top-center", "√úst Orta", 0, 1),
            ("top-right", "Saƒü √úst", 0, 2),
            ("center-left", "Sol Orta", 1, 0),
            ("center", "Orta", 1, 1),
            ("center-right", "Saƒü Orta", 1, 2),
            ("bottom-left", "Sol Alt", 2, 0),
            ("bottom-center", "Alt Orta", 2, 1),
            ("bottom-right", "Saƒü Alt", 2, 2)
        ]
        
        for value, text, row, col in positions:
            ttk.Radiobutton(
                positions_grid,
                text=text,
                variable=self.watermark_position_var,
                value=value
            ).grid(row=row, column=col, padx=5, pady=2, sticky='w')
    
    def update_watermark_options(self):
        """Filigran se√ßeneklerini g√ºncelle"""
        # Mevcut i√ßeriƒüi temizle
        for widget in self.watermark_content_frame.winfo_children():
            widget.destroy()
        
        if self.watermark_type_var.get() == "text":
            # Metin filigranƒ± se√ßenekleri
            text_frame = ttk.LabelFrame(
                self.watermark_content_frame,
                text="Metin Ayarlarƒ±",
                style='OptionsGroup.TLabelframe'
            )
            text_frame.pack(fill=tk.X)
            
            # Metin
            text_input_frame = ttk.Frame(text_frame)
            text_input_frame.pack(fill=tk.X, padx=10, pady=5)
            
            ttk.Label(text_input_frame, text="Metin:").pack(side=tk.LEFT)
            
            self.watermark_text_var = tk.StringVar(value="KOPYA")
            ttk.Entry(
                text_input_frame,
                textvariable=self.watermark_text_var,
                width=30
            ).pack(side=tk.LEFT, padx=(5, 0), fill=tk.X, expand=True)
            
            # Font boyutu
            font_frame = ttk.Frame(text_frame)
            font_frame.pack(fill=tk.X, padx=10, pady=5)
            
            ttk.Label(font_frame, text="Font boyutu:").pack(side=tk.LEFT)
            
            self.watermark_font_size_var = tk.IntVar(value=50)
            ttk.Spinbox(
                font_frame,
                from_=10,
                to=200,
                textvariable=self.watermark_font_size_var,
                width=10
            ).pack(side=tk.LEFT, padx=(5, 0))
            
            # ≈ûeffaflƒ±k
            opacity_frame = ttk.Frame(text_frame)
            opacity_frame.pack(fill=tk.X, padx=10, pady=5)
            
            ttk.Label(opacity_frame, text="≈ûeffaflƒ±k:").pack(side=tk.LEFT)
            
            self.watermark_opacity_var = tk.DoubleVar(value=0.3)
            opacity_scale = ttk.Scale(
                opacity_frame,
                from_=0.1,
                to=1.0,
                orient=tk.HORIZONTAL,
                variable=self.watermark_opacity_var
            )
            opacity_scale.pack(side=tk.LEFT, padx=(5, 0), fill=tk.X, expand=True)
            
        else:  # image watermark
            # Resim filigranƒ± se√ßenekleri
            image_frame = ttk.LabelFrame(
                self.watermark_content_frame,
                text="Resim Ayarlarƒ±",
                style='OptionsGroup.TLabelframe'
            )
            image_frame.pack(fill=tk.X)
            
            # Resim dosyasƒ±
            file_frame = ttk.Frame(image_frame)
            file_frame.pack(fill=tk.X, padx=10, pady=5)
            
            ttk.Label(file_frame, text="Resim dosyasƒ±:").pack(side=tk.LEFT)
            
            self.watermark_image_var = tk.StringVar()
            ttk.Entry(
                file_frame,
                textvariable=self.watermark_image_var,
                width=30
            ).pack(side=tk.LEFT, padx=(5, 0), fill=tk.X, expand=True)
            
            ttk.Button(
                file_frame,
                text="Se√ß",
                command=self.select_watermark_image
            ).pack(side=tk.LEFT, padx=(5, 0))
            
            # Boyut
            size_frame = ttk.Frame(image_frame)
            size_frame.pack(fill=tk.X, padx=10, pady=5)
            
            ttk.Label(size_frame, text="Boyut (%):").pack(side=tk.LEFT)
            
            self.watermark_size_var = tk.IntVar(value=20)
            ttk.Spinbox(
                size_frame,
                from_=5,
                to=100,
                textvariable=self.watermark_size_var,
                width=10
            ).pack(side=tk.LEFT, padx=(5, 0))
    
    def create_encrypt_options(self):
        """≈ûifreleme se√ßenekleri"""
        # ≈ûifre
        password_frame = ttk.LabelFrame(
            self.dynamic_options,
            text="≈ûifre Ayarlarƒ±",
            style='OptionsGroup.TLabelframe'
        )
        password_frame.pack(fill=tk.X, pady=(0, 10))
        
        # Kullanƒ±cƒ± ≈üifresi
        user_pwd_frame = ttk.Frame(password_frame)
        user_pwd_frame.pack(fill=tk.X, padx=10, pady=5)
        
        ttk.Label(user_pwd_frame, text="Kullanƒ±cƒ± ≈üifresi:").pack(side=tk.LEFT)
        
        self.user_password_var = tk.StringVar()
        ttk.Entry(
            user_pwd_frame,
            textvariable=self.user_password_var,
            show="*",
            width=20
        ).pack(side=tk.LEFT, padx=(5, 0))
        
        # Sahip ≈üifresi
        owner_pwd_frame = ttk.Frame(password_frame)
        owner_pwd_frame.pack(fill=tk.X, padx=10, pady=5)
        
        ttk.Label(owner_pwd_frame, text="Sahip ≈üifresi:").pack(side=tk.LEFT)
        
        self.owner_password_var = tk.StringVar()
        ttk.Entry(
            owner_pwd_frame,
            textvariable=self.owner_password_var,
            show="*",
            width=20
        ).pack(side=tk.LEFT, padx=(5, 0))
        
        # ƒ∞zin ayarlarƒ±
        permissions_frame = ttk.LabelFrame(
            self.dynamic_options,
            text="ƒ∞zin Ayarlarƒ±",
            style='OptionsGroup.TLabelframe'
        )
        permissions_frame.pack(fill=tk.X, pady=(0, 10))
        
        self.allow_printing_var = tk.BooleanVar(value=True)
        ttk.Checkbutton(
            permissions_frame,
            text="Yazdƒ±rmaya izin ver",
            variable=self.allow_printing_var
        ).pack(anchor='w', padx=10, pady=2)
        
        self.allow_copying_var = tk.BooleanVar(value=True)
        ttk.Checkbutton(
            permissions_frame,
            text="Kopyalamaya izin ver",
            variable=self.allow_copying_var
        ).pack(anchor='w', padx=10, pady=2)
        
        self.allow_modification_var = tk.BooleanVar(value=False)
        ttk.Checkbutton(
            permissions_frame,
            text="Deƒüi≈üiklik yapƒ±lmasƒ±na izin ver",
            variable=self.allow_modification_var
        ).pack(anchor='w', padx=10, pady=2)
    
    def create_ocr_options(self):
        """OCR se√ßenekleri"""
        # Dil se√ßimi
        language_frame = ttk.LabelFrame(
            self.dynamic_options,
            text="OCR Dil Ayarlarƒ±",
            style='OptionsGroup.TLabelframe'
        )
        language_frame.pack(fill=tk.X, pady=(0, 10))
        
        lang_select_frame = ttk.Frame(language_frame)
        lang_select_frame.pack(fill=tk.X, padx=10, pady=5)
        
        ttk.Label(lang_select_frame, text="Ana dil:").pack(side=tk.LEFT)
        
        self.ocr_language_var = tk.StringVar(value="tur")
        
        # Mevcut dilleri al
        available_languages = self.ocr_processor.get_available_languages() if self.ocr_processor else ["eng", "tur"]
        
        lang_combo = ttk.Combobox(
            lang_select_frame,
            textvariable=self.ocr_language_var,
            values=available_languages,
            state="readonly",
            width=15
        )
        lang_combo.pack(side=tk.LEFT, padx=(5, 0))
        
        # Otomatik dil algƒ±lama
        self.auto_detect_language_var = tk.BooleanVar(value=True)
        ttk.Checkbutton(
            language_frame,
            text="Otomatik dil algƒ±lama",
            variable=self.auto_detect_language_var
        ).pack(anchor='w', padx=10, pady=2)
        
        # Geli≈ümi≈ü OCR se√ßenekleri
        advanced_ocr_frame = ttk.LabelFrame(
            self.dynamic_options,
            text="Geli≈ümi≈ü Se√ßenekler",
            style='OptionsGroup.TLabelframe'
        )
        advanced_ocr_frame.pack(fill=tk.X, pady=(0, 10))
        
        # DPI
        dpi_frame = ttk.Frame(advanced_ocr_frame)
        dpi_frame.pack(fill=tk.X, padx=10, pady=5)
        
        ttk.Label(dpi_frame, text="DPI:").pack(side=tk.LEFT)
        
        self.ocr_dpi_var = tk.IntVar(value=300)
        ttk.Spinbox(
            dpi_frame,
            from_=150,
            to=600,
            textvariable=self.ocr_dpi_var,
            width=10
        ).pack(side=tk.LEFT, padx=(5, 0))
        
        # √ñn i≈üleme
        self.ocr_preprocessing_var = tk.BooleanVar(value=True)
        ttk.Checkbutton(
            advanced_ocr_frame,
            text="G√∂r√ºnt√º √∂n i≈üleme uygula",
            variable=self.ocr_preprocessing_var
        ).pack(anchor='w', padx=10, pady=2)
        
        # Eƒüim d√ºzeltme
        self.ocr_deskew_var = tk.BooleanVar(value=True)
        ttk.Checkbutton(
            advanced_ocr_frame,
            text="Eƒüim d√ºzeltme",
            variable=self.ocr_deskew_var
        ).pack(anchor='w', padx=10, pady=2)
    
    def select_watermark_image(self):
        """Filigran resmi se√ß"""
        filetypes = [
            ('Resim Dosyalarƒ±', '*.png *.jpg *.jpeg *.gif *.bmp'),
            ('T√ºm Dosyalar', '*.*')
        ]
        
        filename = filedialog.askopenfilename(
            title="Filigran Resmi Se√ßin",
            filetypes=filetypes
        )
        
        if filename:
            self.watermark_image_var.set(filename)
    
    def browse_output_directory(self):
        """√áƒ±ktƒ± dizini se√ß"""
        directory = filedialog.askdirectory(
            title="√áƒ±ktƒ± Dizinini Se√ßin",
            initialdir=self.output_var.get()
        )
        
        if directory:
            self.output_var.set(directory)
            # Konfig√ºrasyona kaydet
            self.config_manager.set('pdf_processing.output_directory', directory)
            self.config_manager.save()
    
    # Processing Methods
    def start_processing(self):
        """ƒ∞≈ülemi ba≈ülat"""
        if not self.selected_files:
            messagebox.showwarning("Uyarƒ±", "L√ºtfen √∂nce dosya se√ßin!")
            return
        
        if self.is_processing:
            messagebox.showinfo("Bilgi", "Zaten bir i≈ülem devam ediyor!")
            return
        
        # √áƒ±ktƒ± dizini kontrol√º
        output_dir = self.output_var.get()
        if not output_dir or not os.path.exists(output_dir):
            messagebox.showerror("Hata", "Ge√ßerli bir √ßƒ±ktƒ± dizini se√ßin!")
            return
        
        # ƒ∞≈ülem ayarlarƒ±nƒ± hazƒ±rla
        operation_settings = self.get_operation_settings()
        
        # Progress panel'i g√∂ster
        self.show_progress_panel()
        self.is_processing = True
        
        # Process button'ƒ± devre dƒ±≈üƒ± bƒ±rak
        self.process_btn.configure(state='disabled', text="ƒ∞≈üleniyor...")
        
        # ƒ∞≈ülemi thread'de ba≈ülat
        processing_thread = threading.Thread(
            target=self.process_files,
            args=(self.selected_files.copy(), operation_settings),
            daemon=True
        )
        processing_thread.start()
    
    def get_operation_settings(self):
        """ƒ∞≈ülem ayarlarƒ±nƒ± al"""
        settings = {
            'operation': self.current_operation,
            'output_directory': self.output_var.get()
        }
        
        # ƒ∞≈üleme g√∂re ayarlarƒ± ekle
        if self.current_operation == 'merge':
            settings.update({
                'order': getattr(self, 'merge_order_var', tk.StringVar()).get(),
                'add_bookmarks': getattr(self, 'add_bookmarks_var', tk.BooleanVar()).get()
            })
        elif self.current_operation == 'split':
            settings.update({
                'split_type': getattr(self, 'split_type_var', tk.StringVar()).get(),
                'pages_per_file': getattr(self, 'pages_per_file_var', tk.IntVar()).get()
            })
        elif self.current_operation == 'compress':
            settings.update({
                'quality': getattr(self, 'compression_quality_var', tk.StringVar()).get(),
                'optimize_images': getattr(self, 'optimize_images_var', tk.BooleanVar()).get(),
                'remove_metadata': getattr(self, 'remove_metadata_var', tk.BooleanVar()).get()
            })
        elif self.current_operation == 'convert':
            settings.update({
                'output_format': getattr(self, 'output_format_var', tk.StringVar()).get(),
                'dpi': getattr(self, 'output_dpi_var', tk.IntVar()).get()
            })
        elif self.current_operation == 'rotate':
            settings.update({
                'angle': getattr(self, 'rotation_angle_var', tk.IntVar()).get(),
                'pages': getattr(self, 'rotate_pages_var', tk.StringVar()).get(),
                'specific_pages': getattr(self, 'specific_pages_var', tk.StringVar()).get()
            })
        elif self.current_operation == 'watermark':
            settings.update({
                'type': getattr(self, 'watermark_type_var', tk.StringVar()).get(),
                'position': getattr(self, 'watermark_position_var', tk.StringVar()).get()
            })
            
            if settings['type'] == 'text':
                settings.update({
                    'text': getattr(self, 'watermark_text_var', tk.StringVar()).get(),
                    'font_size': getattr(self, 'watermark_font_size_var', tk.IntVar()).get(),
                    'opacity': getattr(self, 'watermark_opacity_var', tk.DoubleVar()).get()
                })
            else:
                settings.update({
                    'image_path': getattr(self, 'watermark_image_var', tk.StringVar()).get(),
                    'size': getattr(self, 'watermark_size_var', tk.IntVar()).get()
                })
        elif self.current_operation == 'encrypt':
            settings.update({
                'user_password': getattr(self, 'user_password_var', tk.StringVar()).get(),
                'owner_password': getattr(self, 'owner_password_var', tk.StringVar()).get(),
                'allow_printing': getattr(self, 'allow_printing_var', tk.BooleanVar()).get(),
                'allow_copying': getattr(self, 'allow_copying_var', tk.BooleanVar()).get(),
                'allow_modification': getattr(self, 'allow_modification_var', tk.BooleanVar()).get()
            })
        elif self.current_operation == 'ocr':
            settings.update({
                'language': getattr(self, 'ocr_language_var', tk.StringVar()).get(),
                'auto_detect': getattr(self, 'auto_detect_language_var', tk.BooleanVar()).get(),
                'dpi': getattr(self, 'ocr_dpi_var', tk.IntVar()).get(),
                'preprocessing': getattr(self, 'ocr_preprocessing_var', tk.BooleanVar()).get(),
                'deskew': getattr(self, 'ocr_deskew_var', tk.BooleanVar()).get()
            })
        
        return settings
    
    def process_files(self, files, settings):
        """Dosyalarƒ± i≈üle"""
        try:
            results = []
            total_files = len(files)
            
            for i, file_path in enumerate(files):
                if not self.is_processing:  # ƒ∞ptal edildi
                    break
                
                # Progress g√ºncelle
                progress = (i / total_files) * 100
                self.update_progress(progress, f"ƒ∞≈üleniyor: {Path(file_path).name}")
                
                # Dosyayƒ± i≈üle
                try:
                    start_time = time.time()
                    result = self.process_single_file(file_path, settings)
                    end_time = time.time()
                    
                    results.append({
                        'file': Path(file_path).name,
                        'operation': settings['operation'],
                        'status': 'Ba≈üarƒ±lƒ±' if result['success'] else 'Hata',
                        'size': self.format_file_size(result.get('output_size', 0)),
                        'time': f"{end_time - start_time:.1f}s",
                        'output_path': result.get('output_path', ''),
                        'error': result.get('error', '')
                    })
                    
                except Exception as e:
                    results.append({
                        'file': Path(file_path).name,
                        'operation': settings['operation'],
                        'status': 'Hata',
                        'size': '-',
                        'time': '-',
                        'output_path': '',
                        'error': str(e)
                    })
                
                # ƒ∞statistikleri g√ºncelle
                self.update_processing_stats(i + 1, total_files, results)
            
            # ƒ∞≈ülem tamamlandƒ±
            self.processing_completed(results)
            
        except Exception as e:
            self.processing_error(str(e))
    
    def process_single_file(self, file_path, settings):
        """Tek dosyayƒ± i≈üle"""
        operation = settings['operation']
        
        try:
            if operation == 'merge':
                # Birle≈ütirme i≈ülemi t√ºm dosyalar i√ßin bir kez yapƒ±lƒ±r
                if file_path == settings.get('first_file'):
                    return self.pdf_processor.merge_pdfs(
                        settings['all_files'],
                        settings['output_directory'],
                        order=settings.get('order', 'filename'),
                        add_bookmarks=settings.get('add_bookmarks', True)
                    )
                else:
                    return {'success': True, 'skipped': True}
                    
            elif operation == 'split':
                return self.pdf_processor.split_pdf(
                    file_path,
                    settings['output_directory'],
                    split_type=settings.get('split_type', 'pages'),
                    pages_per_file=settings.get('pages_per_file', 1)
                )
                
            elif operation == 'compress':
                return self.pdf_processor.compress_pdf(
                    file_path,
                    settings['output_directory'],
                    quality=settings.get('quality', 'medium'),
                    optimize_images=settings.get('optimize_images', True),
                    remove_metadata=settings.get('remove_metadata', False)
                )
                
            elif operation == 'convert':
                return self.pdf_processor.convert_pdf(
                    file_path,
                    settings['output_directory'],
                    output_format=settings.get('output_format', 'docx'),
                    dpi=settings.get('dpi', 300)
                )
                
            elif operation == 'rotate':
                return self.pdf_processor.rotate_pdf(
                    file_path,
                    settings['output_directory'],
                    angle=settings.get('angle', 90),
                    pages=settings.get('pages', 'all'),
                    specific_pages=settings.get('specific_pages', '')
                )
                
            elif operation == 'watermark':
                return self.pdf_processor.add_watermark(
                    file_path,
                    settings['output_directory'],
                    watermark_type=settings.get('type', 'text'),
                    **{k: v for k, v in settings.items() if k not in ['operation', 'output_directory', 'type']}
                )
                
            elif operation == 'encrypt':
                return self.pdf_processor.encrypt_pdf(
                    file_path,
                    settings['output_directory'],
                    user_password=settings.get('user_password', ''),
                    owner_password=settings.get('owner_password', ''),
                    permissions={
                        'printing': settings.get('allow_printing', True),
                        'copying': settings.get('allow_copying', True),
                        'modification': settings.get('allow_modification', False)
                    }
                )
                
            elif operation == 'decrypt':
                return self.pdf_processor.decrypt_pdf(
                    file_path,
                    settings['output_directory'],
                    password=settings.get('password', '')
                )
                
            elif operation == 'ocr':
                return self.ocr_processor.process_pdf(
                    file_path,
                    settings['output_directory'],
                    language=settings.get('language', 'tur'),
                    auto_detect=settings.get('auto_detect', True),
                    dpi=settings.get('dpi', 300),
                    preprocessing=settings.get('preprocessing', True),
                    deskew=settings.get('deskew', True)
                )
                
            elif operation == 'extract_text':
                return self.pdf_processor.extract_text(
                    file_path,
                    settings['output_directory']
                )
                
            elif operation == 'extract_images':
                return self.pdf_processor.extract_images(
                    file_path,
                    settings['output_directory']
                )
                
            elif operation == 'optimize':
                return self.pdf_processor.optimize_pdf(
                    file_path,
                    settings['output_directory']
                )
                
            else:
                return {'success': False, 'error': f'Desteklenmeyen i≈ülem: {operation}'}
                
        except Exception as e:
            return {'success': False, 'error': str(e)}
    
    def update_progress(self, percentage, message):
        """Progress g√ºncelle"""
        def update_ui():
            self.main_progress_var.set(percentage)
            self.progress_text.configure(text=message)
        
        # UI g√ºncellemesini main thread'de yap
        self.after_idle(update_ui)
    
    def update_processing_stats(self, processed, total, results):
        """ƒ∞≈ülem istatistiklerini g√ºncelle"""
        def update_ui():
            successful = len([r for r in results if r['status'] == 'Ba≈üarƒ±lƒ±'])
            errors = len([r for r in results if r['status'] == 'Hata'])
            remaining = total - processed
            
            self.stats_labels['processed'].configure(text=f"ƒ∞≈ülenen: {processed}")
            self.stats_labels['remaining'].configure(text=f"Kalan: {remaining}")
            self.stats_labels['errors'].configure(text=f"Hata: {errors}")
            
            # Hƒ±z hesapla (basit)
            if processed > 0:
                avg_time = sum([float(r['time'].replace('s', '')) for r in results if r['time'] != '-']) / len([r for r in results if r['time'] != '-'])
                speed = 1.0 / avg_time if avg_time > 0 else 0
                self.stats_labels['speed'].configure(text=f"Hƒ±z: {speed:.1f} dosya/s")
                
                # ETA
                if remaining > 0:
                    eta_seconds = remaining * avg_time
                    eta_minutes = int(eta_seconds // 60)
                    eta_seconds = int(eta_seconds % 60)
                    self.stats_labels['eta'].configure(text=f"Tahmini: {eta_minutes:02d}:{eta_seconds:02d}")
        
        self.after_idle(update_ui)
    
    def processing_completed(self, results):
        """ƒ∞≈ülem tamamlandƒ±ƒüƒ±nda √ßaƒürƒ±lƒ±r"""
        def update_ui():
            self.is_processing = False
            
            # Progress panel'i gizle
            self.progress_panel.pack_forget()
            
            # Results panel'i g√∂ster ve doldur
            self.populate_results(results)
            self.show_results_panel()
            
            # Process button'ƒ± yeniden aktifle≈ütir
            self.process_btn.configure(state='normal', text="üöÄ ƒ∞≈ülemi Ba≈ülat")
            
            # Ba≈üarƒ± mesajƒ±
            successful = len([r for r in results if r['status'] == 'Ba≈üarƒ±lƒ±'])
            total = len(results)
            
            if successful == total:
                self.show_notification(f"‚úÖ T√ºm dosyalar ba≈üarƒ±yla i≈ülendi! ({successful}/{total})", "success")
            else:
                errors = total - successful
                self.show_notification(f"‚ö†Ô∏è ƒ∞≈ülem tamamlandƒ±: {successful} ba≈üarƒ±lƒ±, {errors} hata", "warning")
        
        self.after_idle(update_ui)
    
    def processing_error(self, error_message):
        """ƒ∞≈ülem hatasƒ± durumunda √ßaƒürƒ±lƒ±r"""
        def update_ui():
            self.is_processing = False
            
            # Progress panel'i gizle
            self.progress_panel.pack_forget()
            
            # Process button'ƒ± yeniden aktifle≈ütir
            self.process_btn.configure(state='normal', text="üöÄ ƒ∞≈ülemi Ba≈ülat")
            
            # Hata mesajƒ± g√∂ster
            messagebox.showerror("ƒ∞≈ülem Hatasƒ±", f"ƒ∞≈ülem sƒ±rasƒ±nda hata olu≈ütu:\n\n{error_message}")
        
        self.after_idle(update_ui)
    
    def cancel_processing(self):
        """ƒ∞≈ülemi iptal et"""
        if self.is_processing:
            result = messagebox.askyesno("ƒ∞ptal", "ƒ∞≈ülemi iptal etmek istediƒüinizden emin misiniz?")
            if result:
                self.is_processing = False
                self.show_notification("‚èπÔ∏è ƒ∞≈ülem iptal edildi", "info")
    
    def populate_results(self, results):
        """Sonu√ßlarƒ± treeview'a ekle"""
        # Mevcut √∂ƒüeleri temizle
        for item in self.results_tree.get_children():
            self.results_tree.delete(item)
        
        # Sonu√ßlarƒ± ekle
        for result in results:
            if not result.get('skipped', False):
                self.results_tree.insert(
                    '',
                    'end',
                    values=(
                        result['file'],
                        result['operation'],
                        result['status'],
                        result['size'],
                        result['time']
                    ),
                    tags=(result['status'].lower(),)
                )
        
        # Tag renklerini ayarla
        self.results_tree.tag_configure('ba≈üarƒ±lƒ±', foreground='green')
        self.results_tree.tag_configure('hata', foreground='red')
    
    def on_result_double_click(self, event):
        """Sonu√ß √∂ƒüesine √ßift tƒ±klama"""
        selection = self.results_tree.selection()
        if selection:
            item = self.results_tree.item(selection[0])
            values = item['values']
            
            if values[2] == 'Hata':  # Status
                # Hata detaylarƒ±nƒ± g√∂ster
                messagebox.showerror("Hata Detayƒ±", f"Dosya: {values[0]}\nHata: Detay bilgi yok")
            else:
                # √áƒ±ktƒ± klas√∂r√ºn√º a√ß
                self.open_output_folder()
    
    def export_results(self):
        """Sonu√ßlarƒ± rapor olarak kaydet"""
        try:
            filename = filedialog.asksaveasfilename(
                title="Raporu Kaydet",
                defaultextension=".txt",
                filetypes=[
                    ("Metin Dosyalarƒ±", "*.txt"),
                    ("CSV Dosyalarƒ±", "*.csv"),
                    ("JSON Dosyalarƒ±", "*.json")
                ]
            )
            
            if filename:
                # Basit metin raporu
                with open(filename, 'w', encoding='utf-8') as f:
                    f.write(f"PyPDF-Stirling Tools v2 ƒ∞≈ülem Raporu\n")
                    f.write(f"Tarih: {time.strftime('%Y-%m-%d %H:%M:%S')}\n")
                    f.write(f"ƒ∞≈ülem: {self.current_operation}\n\n")
                    
                    for child in self.results_tree.get_children():
                        values = self.results_tree.item(child)['values']
                        f.write(f"Dosya: {values[0]}\n")
                        f.write(f"Durum: {values[2]}\n")
                        f.write(f"Boyut: {values[3]}\n")
                        f.write(f"S√ºre: {values[4]}\n")
                        f.write("-" * 40 + "\n")
                
                self.show_notification("üíæ Rapor kaydedildi", "success")
        
        except Exception as e:
            messagebox.showerror("Hata", f"Rapor kaydedilemedi: {e}")
    
    def open_output_folder(self):
        """√áƒ±ktƒ± klas√∂r√ºn√º a√ß"""
        output_dir = self.output_var.get()
        if os.path.exists(output_dir):
            try:
                if os.name == 'nt':  # Windows
                    os.startfile(output_dir)
                elif os.name == 'posix':  # macOS/Linux
                    os.system(f'open "{output_dir}"' if sys.platform == 'darwin' else f'xdg-open "{output_dir}"')
            except Exception as e:
                messagebox.showerror("Hata", f"Klas√∂r a√ßƒ±lamadƒ±: {e}")
        else:
            messagebox.showwarning("Uyarƒ±", "√áƒ±ktƒ± klas√∂r√º bulunamadƒ±!")
    
    # Public Methods (Sidebar'dan √ßaƒürƒ±lacak)
    def set_operation(self, operation_id):
        """ƒ∞≈ülemi ayarla"""
        self.current_operation = operation_id
        
        # Eƒüer dosya listesi g√∂r√ºn√ºrse combo'yu g√ºncelle
        if self.selected_files and hasattr(self, 'operation_combo'):
            operations = {
                'merge': 'üîó PDF Birle≈ütir',
                'split': '‚úÇÔ∏è PDF B√∂l',
                'compress': 'üóúÔ∏è PDF Sƒ±kƒ±≈ütƒ±r',
                'convert': 'üîÑ Format D√∂n√º≈üt√ºr',
                'rotate': '‚Üª Sayfa D√∂nd√ºr',
                'extract_text': 'üìÑ Metin √áƒ±kar',
                'extract_images': 'üñºÔ∏è Resim √áƒ±kar',
                'watermark': 'üíß Filigran Ekle',
                'encrypt': 'üîê ≈ûifrele',
                'decrypt': 'üîì ≈ûifre Kaldƒ±r',
                'ocr': 'üëÅÔ∏è OCR Uygula',
                'optimize': '‚ö° Optimize Et'
            }
            
            operation_name = operations.get(operation_id, '')
            self.operation_var.set(operation_name)
            self.update_options_panel()
    
    def search_content(self, query):
        """ƒ∞√ßerik arama"""
        self.current_search_query = query
        # PDF i√ßinde arama yapacak fonksiyon
        # ≈ûimdilik basit bir implementasyon
        print(f"Aranƒ±yor: {query}")
    
    def clear_search_results(self):
        """Arama sonu√ßlarƒ±nƒ± temizle"""
        self.current_search_query = ""
        self.search_results.clear()
    
    def save_current_work(self):
        """Mevcut √ßalƒ±≈ümayƒ± kaydet"""
        if self.selected_files:
            # Proje dosyasƒ± kaydet
            try:
                project_data = {
                    'files': self.selected_files,
                    'operation': self.current_operation,
                    'settings': self.get_operation_settings(),
                    'timestamp': time.time()
                }
                
                filename = filedialog.asksaveasfilename(
                    title="Projeyi Kaydet",
                    defaultextension=".json",
                    filetypes=[("Proje Dosyalarƒ±", "*.json")]
                )
                
                if filename:
                    with open(filename, 'w', encoding='utf-8') as f:
                        json.dump(project_data, f, indent=2, ensure_ascii=False)
                    
                    self.show_notification("üíæ Proje kaydedildi", "success")
            
            except Exception as e:
                messagebox.showerror("Hata", f"Proje kaydedilemedi: {e}")
    
    def load_project(self, filename):
        """Proje dosyasƒ± y√ºkle"""
        try:
            with open(filename, 'r', encoding='utf-8') as f:
                project_data = json.load(f)
            
            # Dosyalarƒ± y√ºkle
            self.selected_files = project_data.get('files', [])
            self.current_operation = project_data.get('operation', 'merge')
            
            # UI'ƒ± g√ºncelle
            if self.selected_files:
                self.update_file_list_display()
                self.show_file_list()
            
            self.show_notification("üìÅ Proje y√ºklendi", "success")
            
        except Exception as e:
            messagebox.showerror("Hata", f"Proje y√ºklenemedi: {e}")
    
    # Advanced Features
    def show_ocr_language_manager(self):
        """OCR dil y√∂neticisini g√∂ster"""
        try:
            from ui.ocr_language_manager import OCRLanguageManager
            manager = OCRLanguageManager(
                parent=self.winfo_toplevel(),
                ocr_processor=self.ocr_processor
            )
            manager.show()
        except ImportError:
            messagebox.showinfo("Bilgi", "OCR dil y√∂neticisi hen√ºz mevcut deƒüil")
    
    def show_automation_panel(self):
        """Otomasyon panelini g√∂ster"""
        try:
            from ui.automation_panel import AutomationPanel
            panel = AutomationPanel(
                parent=self.winfo_toplevel(),
                app_instance=self.app_instance
            )
            panel.show()
        except ImportError:
            messagebox.showinfo("Bilgi", "Otomasyon paneli hen√ºz mevcut deƒüil")
    
    def show_script_editor(self):
        """Script edit√∂r√ºn√º g√∂ster"""
        try:
            from ui.script_editor import ScriptEditor
            editor = ScriptEditor(
                parent=self.winfo_toplevel(),
                app_instance=self.app_instance
            )
            editor.show()
        except ImportError:
            messagebox.showinfo("Bilgi", "Script edit√∂r√º hen√ºz mevcut deƒüil")
    
    def cleanup(self):
        """Temizlik i≈ülemleri"""
        # ƒ∞≈ülemi durdur
        self.is_processing = False
        
        # Ge√ßici dosyalarƒ± temizle
        if hasattr(self.pdf_processor, 'cleanup'):
            self.pdf_processor.cleanup()
#!/usr/bin/env python3
# -*- coding: utf-8 -*-
"""
PyPDF-Stirling Tools v2 - Modern Content Area
"""

import tkinter as tk
from tkinter import ttk, filedialog, messagebox
import threading
import os
from pathlib import Path
from typing import List, Dict, Any, Optional, Callable
import json
import time

class ModernContent(ttk.Frame):
    """
    Modern content area with drag-drop, progress tracking, and real-time updates
    """
    
    def __init__(self, parent, config_manager, theme_manager, pdf_processor, ocr_processor, app_instance):
        super().__init__(parent)
        
        self.config_manager = config_manager
        self.theme_manager = theme_manager
        self.pdf_processor = pdf_processor
        self.ocr_processor = ocr_processor
        self.app_instance = app_instance
        
        # Content state
        self.current_operation = None
        self.selected_files = []
        self.output_directory = None
        self.processing_queue = []
        self.is_processing = False
        
        # UI components
        self.drop_zone = None
        self.file_list_frame = None
        self.options_panel = None
        self.progress_panel = None
        self.results_panel = None
        
        # Search functionality
        self.search_results = []
        self.current_search_query = ""
        
        self.create_content_area()
        self.setup_drag_and_drop()
    
    def create_content_area(self):
        """Content area'yƒ± olu≈ütur"""
        self.configure(style='Content.TFrame')
        
        # Ana container
        main_container = ttk.Frame(self, style='ContentContainer.TFrame')
        main_container.pack(fill=tk.BOTH, expand=True, padx=20, pady=20)
        
        # √úst b√∂l√ºm - Drop zone ve file list
        self.create_upper