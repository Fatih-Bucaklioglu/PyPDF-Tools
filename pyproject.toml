[build-system]
requires = ["setuptools>=61.0", "wheel", "setuptools-scm"]
build-backend = "setuptools.build_meta"

[project]
name = "pypdf-tools"
authors = [
    {name = "Fatih Bucaklıoğlu", email = "fatih.bucaklioglu@example.com"}
]
description = "Hibrit masaüstü PDF yönetim ve düzenleme uygulaması"
readme = "README.md"
license = {file = "LICENSE"}
requires-python = ">=3.8"
classifiers = [
    "Development Status :: 4 - Beta",
    "Intended Audience :: End Users/Desktop",
    "Intended Audience :: Developers",
    "License :: OSI Approved :: MIT License",
    "Operating System :: OS Independent",
    "Programming Language :: Python :: 3",
    "Programming Language :: Python :: 3.8",
    "Programming Language :: Python :: 3.9",
    "Programming Language :: Python :: 3.10",
    "Programming Language :: Python :: 3.11",
    "Programming Language :: JavaScript",
    "Topic :: Office/Business",
    "Topic :: Text Processing :: General",
    "Topic :: Multimedia :: Graphics :: Graphics Conversion",
    "Environment :: X11 Applications :: Qt",
    "Framework :: Qt"
]
keywords = ["pdf", "editor", "viewer", "annotation", "merge", "split", "gui", "desktop", "qt", "react"]
dependencies = [
    "PyQt6>=6.4.0",
    "PyQt6-WebEngine>=6.4.0",
    "PyPDF2>=3.0.0",
    "pypdf>=3.0.0",
    "reportlab>=4.0.0",
    "Pillow>=9.0.0",
    "click>=8.0.0",
    "pyyaml>=6.0",
    "toml>=0.10.0",
    "requests>=2.28.0",
    "cryptography>=3.4.8"
]
dynamic = ["version"]

[project.urls]
Homepage = "https://github.com/Fatih-Bucaklioglu/PyPDF-Tools"
"Bug Reports" = "https://github.com/Fatih-Bucaklioglu/PyPDF-Tools/issues"
"Source Code" = "https://github.com/Fatih-Bucaklioglu/PyPDF-Tools"
Documentation = "https://github.com/Fatih-Bucaklioglu/PyPDF-Tools/docs"

[project.optional-dependencies]
ai = [
    "openai>=0.27.0",
    "transformers>=4.21.0",
    "torch>=1.12.0"
]
ocr = [
    "pytesseract>=0.3.10",
    "opencv-python>=4.6.0"
]
dev = [
    "pytest>=7.0.0",
    "pytest-qt>=4.0.0",
    "pytest-cov>=3.0.0",
    "black>=22.0.0",
    "isort>=5.10.0",
    "flake8>=4.0.0",
    "mypy>=0.950"
]
build = [
    "pyinstaller>=5.0.0",
    "wheel>=0.37.0"
]

[project.scripts]
pypdf-tools = "pypdf_tools.main:main"
pypdf = "pypdf_tools.cli.cli_handler:cli_main"

[project.gui-scripts]
pypdf-tools-gui = "pypdf_tools.main:main_gui"

[tool.setuptools]
package-dir = {"" = "src"}

[tool.setuptools.packages.find]
where = ["src"]

[tool.setuptools.package-data]
"pypdf_tools" = [
    "web/build/*",
    "web/build/static/css/*",
    "web/build/static/js/*",
    "web/build/static/media/*",
    "resources/*",
    "assets/*"
]

[tool.setuptools_scm]
write_to = "src/pypdf_tools/_version.py"

[tool.black]
line-length = 88
target-version = ['py38', 'py39', 'py310', 'py311']
include = '\.pyi?$'
extend-exclude = '''
/(
    # directories
    \.eggs
    | \.git
    | \.hg
    | \.mypy_cache
    | \.tox
    | \.venv
    | build
    | dist
)/
'''

[tool.isort]
profile = "black"
multi_line_output = 3
line_length = 88
known_first_party = ["pypdf_tools"]

[tool.mypy]
python_version = "3.8"
warn_return_any = true
warn_unused_configs = true
disallow_untyped_defs = true
disallow_incomplete_defs = true
check_untyped_defs = true
disallow_untyped_decorators = true
no_implicit_optional = true
warn_redundant_casts = true
warn_unused_ignores = true
warn_no_return = true
warn_unreachable = true
strict_equality = true

[tool.pytest.ini_options]
minversion = "7.0"
addopts = "-ra -q --strict-markers --strict-config"
testpaths = ["tests"]
filterwarnings = [
    "error",
    "ignore::UserWarning",
    "ignore:distutils Version classes are deprecated:DeprecationWarning"
]
markers = [
    "slow: marks tests as slow (deselect with '-m \"not slow\"')",
    "integration: marks tests as integration tests"
]

[tool.coverage.run]
source = ["src/pypdf_tools"]
omit = [
    "*/tests/*",
    "*/test_*",
    "src/pypdf_tools/_version.py"
]

[tool.coverage.report]
exclude_lines = [
    "pragma: no cover",
    "def __repr__",
    "if self.debug:",
    "if settings.DEBUG",
    "raise AssertionError",
    "raise NotImplementedError",
    "if 0:",
    "if __name__ == .__main__.:"
]
