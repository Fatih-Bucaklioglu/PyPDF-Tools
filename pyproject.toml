[build-system]
requires = [
    "setuptools>=65.0",
    "wheel>=0.37.0",
    "build>=0.8.0"
]
build-backend = "setuptools.build_meta"

[project]
name = "pypdf-tools"
version = "2.0.0"
description = "Modern, Powerful and User-Friendly PDF Processing Application"
readme = "README.md"
license = {file = "LICENSE"}
authors = [
    {name = "Fatih Bucaklıoğlu", email = "fatih@pypdf-tools.com"}
]
maintainers = [
    {name = "Fatih Bucaklıoğlu", email = "fatih@pypdf-tools.com"}
]
keywords = [
    "pdf", "merge", "split", "compress", "ocr", "convert", 
    "gui", "desktop", "tool", "utility", "document", 
    "processing", "qt6", "cross-platform", "stirling-pdf"
]
classifiers = [
    "Development Status :: 5 - Production/Stable",
    "Intended Audience :: End Users/Desktop",
    "Intended Audience :: Developers",
    "License :: OSI Approved :: MIT License",
    "Operating System :: OS Independent",
    "Programming Language :: Python :: 3",
    "Programming Language :: Python :: 3.8",
    "Programming Language :: Python :: 3.9",
    "Programming Language :: Python :: 3.10",
    "Programming Language :: Python :: 3.11",
    "Programming Language :: Python :: 3.12",
    "Topic :: Office/Business",
    "Topic :: Utilities",
    "Topic :: Multimedia :: Graphics",
    "Topic :: Text Processing",
    "Environment :: X11 Applications :: Qt",
    "Environment :: Win32 (MS Windows)",
    "Environment :: MacOS X",
]
requires-python = ">=3.8"
dependencies = [
    # GUI Framework
    "PyQt6>=6.5.0",
    "PyQt6-Qt6>=6.5.0",
    
    # PDF Processing
    "PyPDF2>=3.0.0",
    "pymupdf>=1.23.0",
    "reportlab>=4.0.0",
    
    # Image Processing
    "Pillow>=10.0.0",
    "opencv-python>=4.8.0",
    
    # OCR
    "pytesseract>=0.3.10",
    
    # Document Conversion
    "python-docx>=1.0.0",
    "openpyxl>=3.1.0",
    "python-pptx>=0.6.21",
    
    # Utilities
    "psutil>=5.9.0",
    "requests>=2.31.0",
    "packaging>=23.0",
    "appdirs>=1.4.4",
    "send2trash>=1.8.2",
    
    # Logging & Config
    "colorlog>=6.7.0",
    "pyyaml>=6.0",
    "toml>=0.10.2",
    
    # Compression
    "zstandard>=0.21.0",
    
    # Encryption
    "cryptography>=41.0.0",
]

[project.optional-dependencies]
ocr = [
    "easyocr>=1.7.0",
    "paddlepaddle>=2.5.0",
    "paddleocr>=2.7.0",
]
ai = [
    "transformers>=4.33.0",
    "torch>=2.0.0",
    "opencv-python>=4.8.0",
]
cloud = [
    "boto3>=1.28.0",
    "google-cloud-storage>=2.10.0",
    "dropbox>=11.36.0",
]
dev = [
    # Testing
    "pytest>=7.4.0",
    "pytest-cov>=4.1.0",
    "pytest-mock>=3.11.0",
    "pytest-qt>=4.2.0",
    "pytest-xvfb>=3.0.0",
    "pytest-timeout>=2.1.0",
    
    # Code Quality
    "black>=23.7.0",
    "isort>=5.12.0",
    "flake8>=6.0.0",
    "pylint>=2.17.0",
    "mypy>=1.5.0",
    
    # Pre-commit
    "pre-commit>=3.3.0",
    
    # Documentation
    "sphinx>=7.1.0",
    "sphinx-rtd-theme>=1.3.0",
    "sphinx-autodoc-typehints>=1.24.0",
    
    # Build tools
    "build>=0.10.0",
    "wheel>=0.41.0",
    "twine>=4.0.0",
]
all = [
    "easyocr>=1.7.0",
    "transformers>=4.33.0",
    "boto3>=1.28.0",
    "pytest>=7.4.0",
    "black>=23.7.0",
    "sphinx>=7.1.0",
]

[project.urls]
Homepage = "https://github.com/Fatih-Bucaklioglu/PyPDF-Tools"
Documentation = "https://pypdf-tools.readthedocs.io/"
Repository = "https://github.com/Fatih-Bucaklioglu/PyPDF-Tools.git"
"Bug Reports" = "https://github.com/Fatih-Bucaklioglu/PyPDF-Tools/issues"
"Feature Requests" = "https://github.com/Fatih-Bucaklioglu/PyPDF-Tools/issues/new?template=feature_request.md"
Changelog = "https://github.com/Fatih-Bucaklioglu/PyPDF-Tools/blob/main/CHANGELOG.md"
Discord = "https://discord.gg/pypdf-tools"
Telegram = "https://t.me/pypdf_tools"
Reddit = "https://reddit.com/r/PyPDFTools"

[project.scripts]
pypdf-tools = "pypdf_tools.main:main"
pypdf-cli = "pypdf_tools.cli.cli_handler:main"
pypdf-setup = "pypdf_tools.setup:setup_wizard"

[project.gui-scripts]
pypdf-tools-gui = "pypdf_tools.main:main_gui"

# Tool configurations
[tool.setuptools]
zip-safe = false
include-package-data = true

[tool.setuptools.packages.find]
where = ["src"]
include = ["pypdf_tools*"]
exclude = ["tests*", "docs*", "build*", "dist*"]

[tool.setuptools.package-data]
pypdf_tools = [
    "ui/themes/*.qss",
    "ui/icons/*.png",
    "ui/icons/*.svg",
    "ui/icons/*.ico",
    "ui/translations/*.qm",
    "ui/translations/*.ts",
    "templates/*.py",
    "configs/*.yaml",
    "configs/*.json",
    "resources/*",
]

# Black formatting
[tool.black]
line-length = 88
target-version = ['py38', 'py39', 'py310', 'py311', 'py312']
include = '\.pyi?
extend-exclude = '''
/(
  # directories
  \.eggs
  | \.git
  | \.hg
  | \.mypy_cache
  | \.tox
  | \.venv
  | build
  | dist
  | migrations
)/
'''

# isort import sorting
[tool.isort]
profile = "black"
multi_line_output = 3
line_length = 88
known_first_party = ["pypdf_tools"]
known_third_party = ["PyQt6", "PIL", "cv2", "pytesseract"]
sections = ["FUTURE", "STDLIB", "THIRDPARTY", "FIRSTPARTY", "LOCALFOLDER"]

# pytest configuration
[tool.pytest.ini_options]
minversion = "7.0"
addopts = [
    "-ra",
    "-q",
    "--strict-markers",
    "--strict-config",
    "--cov=src/pypdf_tools",
    "--cov-report=term-missing",
    "--cov-report=html",
    "--cov-report=xml",
    "--cov-fail-under=80"
]
testpaths = ["tests"]
python_files = ["test_*.py", "*_test.py"]
python_classes = ["Test*"]
python_functions = ["test_*"]
markers = [
    "slow: marks tests as slow (deselect with '-m \"not slow\"')",
    "integration: marks tests as integration tests",
    "gui: marks tests that require GUI",
    "ocr: marks tests that require OCR functionality",
    "network: marks tests that require network access",
]
filterwarnings = [
    "ignore::UserWarning",
    "ignore::DeprecationWarning",
]

# Coverage configuration
[tool.coverage.run]
source = ["src/pypdf_tools"]
omit = [
    "*/tests/*",
    "*/test_*.py",
    "*/__init__.py",
    "*/setup.py",
    "*/conftest.py",
]

[tool.coverage.report]
exclude_lines = [
    "pragma: no cover",
    "def __repr__",
    "if self.debug:",
    "if settings.DEBUG",
    "raise AssertionError",
    "raise NotImplementedError",
    "if 0:",
    "if __name__ == .__main__.:",
    "class .*\\bProtocol\\):",
    "@(abc\\.)?abstractmethod",
]

# MyPy type checking
[tool.mypy]
python_version = "3.8"
warn_return_any = true
warn_unused_configs = true
disallow_untyped_defs = true
disallow_incomplete_defs = true
check_untyped_defs = true
disallow_untyped_decorators = true
no_implicit_optional = true
warn_redundant_casts = true
warn_unused_ignores = true
warn_no_return = true
warn_unreachable = true
strict_equality = true
show_error_codes = true

[[tool.mypy.overrides]]
module = [
    "PyQt6.*",
    "cv2",
    "pytesseract",
    "fitz",
    "reportlab.*",
]
ignore_missing_imports = true

# Flake8 linting
[tool.flake8]
max-line-length = 88
extend-ignore = [
    "E203",  # whitespace before ':'
    "E501",  # line too long
    "W503",  # line break before binary operator
    "W504",  # line break after binary operator
]
exclude = [
    ".git",
    "__pycache__",
    "docs/source/conf.py",
    "old",
    "build",
    "dist",
    "*.egg-info",
    ".venv",
    "venv",
]
per-file-ignores = [
    "__init__.py:F401",  # imported but unused
    "tests/*:S101",      # use of assert
]

# Pylint configuration
[tool.pylint.messages_control]
disable = [
    "missing-docstring",
    "invalid-name",
    "too-few-public-methods",
    "too-many-arguments",
    "too-many-locals",
    "too-many-branches",
    "too-many-statements",
    "duplicate-code",
]

[tool.pylint.format]
max-line-length = 88

[tool.pylint.design]
max-attributes = 10
max-locals = 20

# Bandit security linting
[tool.bandit]
exclude_dirs = ["tests", "docs"]
skips = ["B101"]  # assert_used

# Pre-commit hooks configuration
[tool.pre-commit]
repos = [
    {
        repo = "https://github.com/pre-commit/pre-commit-hooks",
        rev = "v4.4.0",
        hooks = [
            {id = "trailing-whitespace"},
            {id = "end-of-file-fixer"},
            {id = "check-yaml"},
            {id = "check-added-large-files"},
            {id = "check-merge-conflict"},
            {id = "debug-statements"},
        ]
    },
    {
        repo = "https://github.com/psf/black",
        rev = "23.7.0",
        hooks = [
            {id = "black", language_version = "python3"}
        ]
    },
    {
        repo = "https://github.com/pycqa/isort",
        rev = "5.12.0",
        hooks = [
            {id = "isort"}
        ]
    },
    {
        repo = "https://github.com/pycqa/flake8",
        rev = "6.0.0",
        hooks = [
            {id = "flake8"}
        ]
    },
    {
        repo = "https://github.com/pre-commit/mirrors-mypy",
        rev = "v1.5.0",
        hooks = [
            {
                id = "mypy",
                additional_dependencies = ["types-PyYAML", "types-requests"]
            }
        ]
    }
]

# Sphinx documentation
[tool.sphinx]
project = "PyPDF-Tools"
copyright = "2024, Fatih Bucaklıoğlu"
author = "Fatih Bucaklıoğlu"
extensions = [
    "sphinx.ext.autodoc",
    "sphinx.ext.viewcode",
    "sphinx.ext.napoleon",
    "sphinx_rtd_theme",
    "sphinx_autodoc_typehints",
]
html_theme = "sphinx_rtd_theme"

# Build system options
[tool.build]
build-dir = "build"

[tool.wheel]
universal = false

# Platform specific configurations
[tool.cibuildwheel]
build = "cp38-* cp39-* cp310-* cp311-* cp312-*"
skip = "cp36-* cp37-* pp* *-win32 *-manylinux_i686"
test-requires = "pytest"
test-command = "pytest {project}/tests"

[tool.cibuildwheel.linux]
before-all = [
    "yum install -y qt6-qtbase-devel tesseract-devel || apt-get update && apt-get install -y qt6-base-dev tesseract-ocr libtesseract-dev"
]

[tool.cibuildwheel.macos]
before-all = [
    "brew install qt6 tesseract"
]

[tool.cibuildwheel.windows]
before-all = [
    "choco install qt6 tesseract"
]

# PyInstaller configuration for building executables
[tool.pyinstaller]
name = "PyPDF-Tools"
console = false
windowed = true
icon = "icons/app_icon.ico"
add_data = [
    "src/pypdf_tools/ui:ui",
    "src/pypdf_tools/configs:configs",
    "src/pypdf_tools/resources:resources",
]
hidden_imports = [
    "PyQt6.QtCore",
    "PyQt6.QtGui", 
    "PyQt6.QtWidgets",
    "pytesseract",
    "cv2",
    "PIL",
]
exclude_modules = [
    "tkinter",
    "matplotlib",
    "numpy.distutils",
]

# Environment variables for development
[tool.env]
PYTHONPATH = "src"
QT_API = "PyQt6"
TESSDATA_PREFIX = "/usr/share/tesseract-ocr/4.00/tessdata"

# Custom commands for common tasks
[tool.scripts]
test = "pytest tests/ -v"
coverage = "pytest tests/ --cov=src/pypdf_tools --cov-report=html"
lint = "flake8 src/ && pylint src/"
format = "black src/ && isort src/"
build = "python -m build"
clean = "rm -rf build/ dist/ *.egg-info/"
