name: Build AppImage

on:
  push:
    tags:
      - 'v*'
  workflow_dispatch:
    inputs:
      version:
        description: 'Version to build'
        required: true
        default: 'latest'
      prerelease:
        description: 'Is this a prerelease?'
        required: false
        type: boolean
        default: false

env:
  APPIMAGE_ARCH: x86_64
  PYTHON_VERSION: '3.11'

jobs:
  build-appimage:
    name: Build AppImage
    runs-on: ubuntu-20.04  # Use older Ubuntu for better compatibility
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      with:
        fetch-depth: 0
    
    - name: Set version
      id: version
      run: |
        if [[ "${{ github.event_name }}" == "workflow_dispatch" ]]; then
          echo "VERSION=${{ github.event.inputs.version }}" >> $GITHUB_OUTPUT
        else
          echo "VERSION=${GITHUB_REF#refs/tags/}" >> $GITHUB_OUTPUT
        fi
    
    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: ${{ env.PYTHON_VERSION }}
    
    - name: Install system dependencies
      run: |
        sudo apt-get update
        sudo apt-get install -y \
          wget \
          file \
          desktop-file-utils \
          libfuse2 \
          tesseract-ocr \
          tesseract-ocr-tur \
          tesseract-ocr-eng \
          tesseract-ocr-deu \
          tesseract-ocr-fra \
          tesseract-ocr-spa \
          tesseract-ocr-ita \
          tesseract-ocr-por \
          tesseract-ocr-rus \
          libreoffice \
          poppler-utils \
          qpdf \
          ghostscript \
          build-essential \
          libgl1-mesa-glx \
          libegl1-mesa \
          libxrandr2 \
          libxss1 \
          libxcursor1 \
          libxcomposite1 \
          libasound2 \
          libxi6 \
          libxtst6 \
          libglib2.0-0 \
          libgtk-3-0 \
          libqt5widgets5 \
          libqt5gui5 \
          libqt5core5a \
          libqt5svg5 \
          libqt5printsupport5 \
          qtbase5-dev \
          qttools5-dev-tools
    
    - name: Install Python dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -e .
        pip install pyinstaller
    
    - name: Download linuxdeploy
      run: |
        wget -O linuxdeploy https://github.com/linuxdeploy/linuxdeploy/releases/download/continuous/linuxdeploy-x86_64.AppImage
        chmod +x linuxdeploy
        
        # Download Python plugin
        wget -O linuxdeploy-plugin-python https://github.com/linuxdeploy/linuxdeploy-plugin-python/releases/download/continuous/linuxdeploy-plugin-python-x86_64.AppImage
        chmod +x linuxdeploy-plugin-python
        
        # Download Qt plugin
        wget -O linuxdeploy-plugin-qt https://github.com/linuxdeploy/linuxdeploy-plugin-qt/releases/download/continuous/linuxdeploy-plugin-qt-x86_64.AppImage
        chmod +x linuxdeploy-plugin-qt
    
    - name: Create AppDir structure
      run: |
        mkdir -p AppDir/usr/{bin,lib,share/{applications,icons/hicolor/256x256/apps,metainfo}}
        
        # Copy main application
        cp src/main.py AppDir/usr/bin/pypdf-tools
        chmod +x AppDir/usr/bin/pypdf-tools
        
        # Copy Python modules
        cp -r src/pypdf_tools AppDir/usr/lib/
        
        # Copy resources
        cp -r assets/* AppDir/usr/share/ 2>/dev/null || true
        
        # Copy icon
        cp assets/icon.png AppDir/usr/share/icons/hicolor/256x256/apps/pypdf-tools.png
        
        # Create desktop file
        cat > AppDir/usr/share/applications/pypdf-tools.desktop << EOF
        [Desktop Entry]
        Version=1.0
        Type=Application
        Name=PyPDF Tools v2
        Comment=Modern PDF Processing Application
        GenericName=PDF Processor
        Exec=pypdf-tools
        Icon=pypdf-tools
        Terminal=false
        Categories=Office;Graphics;Publishing;Photography;
        Keywords=pdf;merge;split;compress;ocr;security;
        MimeType=application/pdf;
        StartupWMClass=PyPDF-Tools
        StartupNotify=true
        EOF
        
        # Create AppStream metainfo
        cat > AppDir/usr/share/metainfo/pypdf-tools.appdata.xml << EOF
        <?xml version="1.0" encoding="UTF-8"?>
        <component type="desktop-application">
          <id>com.fatihbucaklioglu.pypdf-tools</id>
          <name>PyPDF Tools v2</name>
          <summary>Modern PDF Processing Application</summary>
          <description>
            <p>PyPDF Tools v2 is a comprehensive PDF processing application with modern UI and advanced features.</p>
            <p>Features include:</p>
            <ul>
              <li>PDF merging and splitting</li>
              <li>Compression and optimization</li>
              <li>OCR with 50+ languages</li>
              <li>Digital signatures and encryption</li>
              <li>Batch processing and automation</li>
            </ul>
          </description>
          <launchable type="desktop-id">pypdf-tools.desktop</launchable>
          <url type="homepage">https://github.com/Fatih-Bucaklioglu/PyPDF-Tools</url>
          <url type="bugtracker">https://github.com/Fatih-Bucaklioglu/PyPDF-Tools/issues</url>
          <metadata_license>MIT</metadata_license>
          <project_license>MIT</project_license>
          <releases>
            <release version="${{ steps.version.outputs.VERSION }}" date="$(date +%Y-%m-%d)"/>
          </releases>
          <screenshots>
            <screenshot type="default">
              <image>https://raw.githubusercontent.com/Fatih-Bucaklioglu/PyPDF-Tools/main/docs/screenshots/main-window.png</image>
            </screenshot>
          </screenshots>
          <categories>
            <category>Office</category>
            <category>Graphics</category>
          </categories>
        </component>
        EOF
    
    - name: Build with PyInstaller
      run: |
        pyinstaller --onefile \
          --windowed \
          --name=pypdf-tools \
          --icon=assets/icon.png \
          --add-data="src/pypdf_tools:pypdf_tools" \
          --add-data="assets:assets" \
          --hidden-import=pypdf_tools \
          --hidden-import=PyQt6 \
          --hidden-import=PIL \
          --hidden-import=tesseract \
          --distpath=AppDir/usr/bin \
          src/main.py
    
    - name: Copy system dependencies
      run: |
        # Copy Python interpreter
        cp -L $(which python3) AppDir/usr/bin/
        
        # Copy Tesseract
        cp -L $(which tesseract) AppDir/usr/bin/
        
        # Copy tessdata
        cp -r /usr/share/tesseract-ocr/*/tessdata AppDir/usr/share/ 2>/dev/null || true
        cp -r /usr/share/tessdata AppDir/usr/share/ 2>/dev/null || true
        
        # Copy LibreOffice (selective)
        if [ -d /usr/lib/libreoffice ]; then
          mkdir -p AppDir/usr/lib/
          cp -r /usr/lib/libreoffice AppDir/usr/lib/ 2>/dev/null || true
        fi
    
    - name: Deploy with linuxdeploy
      env:
        OUTPUT: PyPDF-Tools-${{ steps.version.outputs.VERSION }}-${{ env.APPIMAGE_ARCH }}.AppImage
        ARCH: ${{ env.APPIMAGE_ARCH }}
      run: |
        # Set environment for plugins
        export LINUXDEPLOY_PLUGIN_PYTHON_ARGS="--python-executable=$(which python3) --python-version=${{ env.PYTHON_VERSION }}"
        
        # Deploy application
        ./linuxdeploy \
          --appdir AppDir \
          --plugin python \
          --plugin qt \
          --output appimage \
          --desktop-file AppDir/usr/share/applications/pypdf-tools.desktop \
          --icon-file AppDir/usr/share/icons/hicolor/256x256/apps/pypdf-tools.png
    
    - name: Test AppImage
      run: |
        # Test basic functionality
        ./PyPDF-Tools-*.AppImage --version
        ./PyPDF-Tools-*.AppImage --help
        ./PyPDF-Tools-*.AppImage --system-info
        
        # Test in sandboxed environment
        mkdir -p test-sandbox
        cd test-sandbox
        ../PyPDF-Tools-*.AppImage --version
    
    - name: Generate checksums
      run: |
        sha256sum PyPDF-Tools-*.AppImage > PyPDF-Tools-${{ steps.version.outputs.VERSION }}-checksums.txt
        md5sum PyPDF-Tools-*.AppImage >> PyPDF-Tools-${{ steps.version.outputs.VERSION }}-checksums.txt
    
    - name: Upload AppImage artifact
      uses: actions/upload-artifact@v3
      with:
        name: appimage-${{ steps.version.outputs.VERSION }}
        path: |
          PyPDF-Tools-*.AppImage
          PyPDF-Tools-*-checksums.txt
        retention-days: 30
    
    - name: Create draft release
      if: github.event_name == 'push' && startsWith(github.ref, 'refs/tags/')
      uses: softprops/action-gh-release@v1
      with:
        files: |
          PyPDF-Tools-*.AppImage
          PyPDF-Tools-*-checksums.txt
        draft: true
        prerelease: ${{ github.event.inputs.prerelease || false }}
        generate_release_notes: true
        body: |
          ## üöÄ PyPDF Tools v2 ${{ steps.version.outputs.VERSION }}
          
          ### üì¶ AppImage Installation
          
          ```bash
          # Download and make executable
          wget https://github.com/Fatih-Bucaklioglu/PyPDF-Tools/releases/download/${{ steps.version.outputs.VERSION }}/PyPDF-Tools-${{ steps.version.outputs.VERSION }}-x86_64.AppImage
          chmod +x PyPDF-Tools-${{ steps.version.outputs.VERSION }}-x86_64.AppImage
          
          # Run
          ./PyPDF-Tools-${{ steps.version.outputs.VERSION }}-x86_64.AppImage
          ```
          
          ### ‚úÖ System Requirements
          - Linux x86_64
          - FUSE2 support
          - Minimum 4GB RAM
          - 500MB disk space
          
          ### üîê Verification
          ```bash
          # Verify checksums
          sha256sum -c PyPDF-Tools-${{ steps.version.outputs.VERSION }}-checksums.txt
          ```
          
          ### üìñ Documentation
          - [Installation Guide](https://github.com/Fatih-Bucaklioglu/PyPDF-Tools/blob/main/docs/installation.md)
          - [AppImage Usage](https://github.com/Fatih-Bucaklioglu/PyPDF-Tools/blob/main/docs/AppImage-USAGE.md)
          - [User Guide](https://github.com/Fatih-Bucaklioglu/PyPDF-Tools/blob/main/docs/user-guide.md)
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

  test-appimage:
    name: Test AppImage
    needs: build-appimage
    runs-on: ubuntu-22.04
    strategy:
      matrix:
        distro: [ubuntu, fedora, debian, arch]
    
    steps:
    - name: Download AppImage
      uses: actions/download-artifact@v3
      with:
        name: appimage-${{ needs.build-appimage.outputs.version }}
    
    - name: Test on ${{ matrix.distro }}
      run: |
        # Test in Docker container
        docker run --rm \
          -v $(pwd):/workspace \
          -w /workspace \
          ${{ matrix.distro }}:latest \
          bash -c "
            # Install FUSE
            if command -v apt-get &> /dev/null; then
              apt-get update && apt-get install -y fuse libfuse2
            elif command -v dnf &> /dev/null; then
              dnf install -y fuse fuse-libs
            elif command -v pacman &> /dev/null; then
              pacman -Sy --noconfirm fuse2
            fi
            
            # Test AppImage
            chmod +x *.AppImage
            ./*.AppImage --version
            ./*.AppImage --system-info
          "

  publish-to-registry:
    name: Publish to AppImage Registry
    needs: [build-appimage, test-appimage]
    runs-on: ubuntu-22.04
    if: github.event_name == 'push' && startsWith(github.ref, 'refs/tags/')
    
    steps:
    - name: Download AppImage
      uses: actions/download-artifact@v3
      with:
        name: appimage-${{ needs.build-appimage.outputs.version }}
    
    - name: Submit to AppImageHub
      run: |
        # Create AppImageHub submission
        cat > appimage-info.yml << EOF
        app: PyPDF Tools v2
        screenshot: https://raw.githubusercontent.com/Fatih-Bucaklioglu/PyPDF-Tools/main/docs/screenshots/main-window.png
        description: Modern PDF Processing Application
        website: https://github.com/Fatih-Bucaklioglu/PyPDF-Tools
        license: MIT
        category: Office
        EOF
        
        # Note: This would require AppImageHub submission process
        echo "AppImage ready for AppImageHub submission"

  cleanup:
    name: Cleanup
    needs: [build-appimage, test-appimage]
    runs-on: ubuntu-22.04
    if: always()
    
    steps:
    - name: Clean build artifacts
      run: |
        # Cleanup would be handled by GitHub automatically
        echo "Build cleanup completed"
