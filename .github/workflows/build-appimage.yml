name: Build AppImage

on:
  push:
    branches: [ main, develop ]
    tags: [ 'v*' ]
  pull_request:
    branches: [ main ]
  workflow_dispatch:

env:
  APP_NAME: PyPDF-Stirling_Tools_v2
  APP_VERSION: 2.0.0

jobs:
  build-appimage:
    runs-on: ubuntu-20.04

    strategy:
      matrix:
        arch: [x86_64]

    steps:
    - name: 🛎️ Checkout Repository
      uses: actions/checkout@v4
      with:
        fetch-depth: 0

    - name: 🐍 Setup Python
      uses: actions/setup-python@v4
      with:
        python-version: '3.8'

    - name: 📦 Install System Dependencies
      run: |
        sudo apt-get update
        sudo apt-get install -y \
          python3-dev \
          python3-pip \
          python3-tk \
          tesseract-ocr \
          tesseract-ocr-eng \
          tesseract-ocr-tur \
          poppler-utils \
          libpoppler-dev \
          libgl1-mesa-dev \
          libglib2.0-0 \
          libfontconfig1 \
          libxrender1 \
          libxext6 \
          libsm6 \
          libice6 \
          libx11-dev \
          libxft2 \
          wget \
          file \
          imagemagick

    - name: 🏗️ Setup Build Environment
      run: |
        python3 -m pip install --upgrade pip setuptools wheel
        python3 -m pip install pyinstaller

    - name: 📋 Cache Python Dependencies
      uses: actions/cache@v3
      with:
        path: ~/.cache/pip
        key: ${{ runner.os }}-pip-${{ hashFiles('requirements.txt') }}
        restore-keys: |
          ${{ runner.os }}-pip-

    - name: 📦 Install Python Dependencies
      run: |
        if [ -f requirements.txt ]; then
          pip install -r requirements.txt
        fi

    - name: 🔍 Validate Application
      run: |
        echo "Testing application imports..."
        python3 -c "
        try:
            import main
            print('✅ Main module import successful')
        except Exception as e:
            print(f'❌ Main module import failed: {e}')
            exit(1)
        "

    - name: 🏗️ Build AppImage
      run: |
        chmod +x build-appimage.sh
        ./build-appimage.sh build

    - name: 🧪 Test AppImage
      run: |
        ./build-appimage.sh test

    - name: 📊 AppImage Information
      run: |
        APPIMAGE_FILE="${APP_NAME}-${APP_VERSION}-${{ matrix.arch }}.AppImage"

        if [ -f "$APPIMAGE_FILE" ]; then
          echo "📦 AppImage Details:"
          echo "   File: $APPIMAGE_FILE"
          echo "   Size: $(du -h "$APPIMAGE_FILE" | cut -f1)"
          echo "   Type: $(file "$APPIMAGE_FILE")"
          echo "   Permissions: $(ls -la "$APPIMAGE_FILE" | cut -d' ' -f1)"

          # Extract desktop file for verification
          echo ""
          echo "🖥️ Desktop Integration:"
          ./"$APPIMAGE_FILE" --appimage-extract usr/share/applications/pypdf-tools-v2.desktop >/dev/null 2>&1 || true
          if [ -f "squashfs-root/usr/share/applications/pypdf-tools-v2.desktop" ]; then
            echo "   Desktop file: ✅ Present"
            echo "   Categories: $(grep "Categories=" squashfs-root/usr/share/applications/pypdf-tools-v2.desktop | cut -d'=' -f2-)"
          else
            echo "   Desktop file: ❌ Missing"
          fi

          # Check for icons
          ./"$APPIMAGE_FILE" --appimage-extract usr/share/icons/ >/dev/null 2>&1 || true
          if [ -d "squashfs-root/usr/share/icons" ]; then
            echo "   Icons: ✅ Present ($(find squashfs-root/usr/share/icons -name "*.png" | wc -l) files)"
          else
            echo "   Icons: ❌ Missing"
          fi

          # Cleanup
          rm -rf squashfs-root/

        else
          echo "❌ AppImage file not found: $APPIMAGE_FILE"
          exit 1
        fi

    - name: 📤 Upload AppImage Artifact
      uses: actions/upload-artifact@v3
      with:
        name: ${{ env.APP_NAME }}-${{ env.APP_VERSION }}-${{ matrix.arch }}-AppImage
        path: ${{ env.APP_NAME }}-${{ env.APP_VERSION }}-${{ matrix.arch }}.AppImage
        retention-days: 30

    - name: 📤 Upload to Release (if tag)
      if: startsWith(github.ref, 'refs/tags/')
      uses: softprops/action-gh-release@v1
      with:
        files: |
          ${{ env.APP_NAME }}-${{ env.APP_VERSION }}-${{ matrix.arch }}.AppImage
        draft: false
        prerelease: ${{ contains(github.ref, '-') }}
        generate_release_notes: true
        name: PyPDF-Stirling Tools v2 ${{ github.ref_name }}
        body: |
          ## PyPDF-Stirling Tools v2 ${{ github.ref_name }}

          ### 🚀 What's New
          - Modern GUI with 4 theme options
          - Comprehensive settings panel
          - Enhanced OCR with multi-language support
          - Improved PDF processing pipeline
          - Cross-platform compatibility

          ### 📦 Downloads

          **Linux AppImage:**
          - Download `${{ env.APP_NAME }}-${{ env.APP_VERSION }}-x86_64.AppImage`
          - Make executable: `chmod +x ${{ env.APP_NAME }}-${{ env.APP_VERSION }}-x86_64.AppImage`
          - Run: `./${{ env.APP_NAME }}-${{ env.APP_VERSION }}-x86_64.AppImage`

          **Other Platforms:**
          - Windows: Use PowerShell install script
          - macOS: Use Homebrew or manual installation
          - See README.md for detailed instructions

          ### 🔧 System Requirements
          - Linux x86_64 (Ubuntu 18.04+, Debian 10+, or equivalent)
          - 4GB RAM minimum, 8GB recommended
          - 500MB free disk space

          ### 📋 What's Included
          - All Python dependencies
          - Tesseract OCR with English and Turkish language packs
          - System libraries for PDF processing
          - Desktop integration files

          ---

          **Note:** This AppImage is portable and doesn't require installation. Just download, make executable, and run!
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

  # Alternative build job using appimage-builder
  build-appimage-builder:
    runs-on: ubuntu-20.04
    if: false  # Disabled by default, enable if needed

    steps:
    - name: 🛎️ Checkout
      uses: actions/checkout@v4

    - name: 📦 Install appimage-builder
      run: |
        sudo apt update
        sudo apt install -y python3-pip python3-setuptools patchelf desktop-file-utils libgdk-pixbuf2.0-dev fakeroot strace
        sudo pip3 install appimage-builder

    - name: 🏗️ Build with appimage-builder
      run: |
        appimage-builder --recipe AppImageBuilder.yml

    - name: 📤 Upload Alternative AppImage
      uses: actions/upload-artifact@v3
      with:
        name: ${{ env.APP_NAME }}-builder-${{ env.APP_VERSION }}-x86_64-AppImage
        path: "*.AppImage"

  # Cross-platform compatibility test
  test-compatibility:
    needs: build-appimage
    runs-on: ubuntu-latest
    strategy:
      matrix:
        container:
          - ubuntu:18.04
          - ubuntu:20.04
          - ubuntu:22.04
          - debian:10
          - debian:11
          - fedora:35
          - opensuse/leap:15.4

    container: ${{ matrix.container }}

    steps:
    - name: 📦 Install Basic Dependencies
      run: |
        if command -v apt-get >/dev/null; then
          apt-get update && apt-get install -y wget xvfb
        elif command -v dnf >/dev/null; then
          dnf install -y wget xorg-x11-server-Xvfb
        elif command -v zypper >/dev/null; then
          zypper install -y wget xvfb-run
        fi

    - name: 📥 Download AppImage
      uses: actions/download-artifact@v3
      with:
        name: ${{ env.APP_NAME }}-${{ env.APP_VERSION }}-x86_64-AppImage

    - name: 🧪 Test AppImage Compatibility
      run: |
        chmod +x ${{ env.APP_NAME }}-${{ env.APP_VERSION }}-x86_64.AppImage

        echo "Testing on ${{ matrix.container }}:"

        # Test basic execution (without GUI)
        timeout 10s ./${{ env.APP_NAME }}-${{ env.APP_VERSION }}-x86_64.AppImage --help || echo "Help command test completed"

        # Test with virtual display
        if command -v xvfb-run >/dev/null; then
          timeout 10s xvfb-run -a ./${{ env.APP_NAME }}-${{ env.APP_VERSION }}-x86_64.AppImage --test || echo "GUI test completed"
        fi

        echo "✅ Compatibility test passed on ${{ matrix.container }}"

  # Security scan
  security-scan:
    needs: build-appimage
    runs-on: ubuntu-latest

    steps:
    - name: 📥 Download AppImage
      uses: actions/download-artifact@v3
      with:
        name: ${{ env.APP_NAME }}-${{ env.APP_VERSION }}-x86_64-AppImage

    - name: 🔍 Security Scan
      run: |
        chmod +x ${{ env.APP_NAME }}-${{ env.APP_VERSION }}-x86_64.AppImage

        echo "🔍 Running security checks..."

        # Check file permissions
        echo "File permissions: $(ls -la ${{ env.APP_NAME }}-${{ env.APP_VERSION }}-x86_64.AppImage)"

        # Extract and check contents
        ./${{ env.APP_NAME }}-${{ env.APP_VERSION }}-x86_64.AppImage --appimage-extract >/dev/null

        # Check for suspicious files
        echo "Checking for suspicious files..."
        find squashfs-root -name "*.so" -exec file {} \; | grep -E "(trojan|virus|malware)" || echo "No suspicious libraries found"

        # Check for setuid files
        echo "Checking for setuid files..."
        find squashfs-root -perm /4000 -ls || echo "No setuid files found"

        # Basic binary analysis
        echo "Binary information:"
        file ${{ env.APP_NAME }}-${{ env.APP_VERSION }}-x86_64.AppImage

        echo "✅ Security scan completed"
