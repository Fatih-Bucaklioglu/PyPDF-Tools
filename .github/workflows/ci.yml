name: CI/CD Pipeline

on:
  push:
    branches: [ main, develop ]
    tags: [ 'v*' ]
  pull_request:
    branches: [ main, develop ]

env:
  # Python konfigürasyonu
  PYTHON_VERSION: '3.11'
  # Node.js konfigürasyonu  
  NODE_VERSION: '18'
  # Test konfigürasyonu
  QT_QPA_PLATFORM: 'offscreen'

jobs:
  # React frontend build ve test
  frontend:
    name: Frontend (React)
    runs-on: ubuntu-latest
    
    defaults:
      run:
        working-directory: ./web
    
    steps:
    - name: Checkout kod
      uses: actions/checkout@v4
    
    - name: Node.js kurulumu
      uses: actions/setup-node@v4
      with:
        node-version: ${{ env.NODE_VERSION }}
        cache: 'npm'
        cache-dependency-path: ./web/package-lock.json
    
    - name: Dependencies yükleme
      run: npm ci
    
    - name: TypeScript type checking
      run: npm run type-check
      continue-on-error: true
    
    - name: Linting
      run: npm run lint
    
    - name: React testleri
      run: npm test -- --coverage --watchAll=false
    
    - name: Frontend build
      run: npm run build
    
    - name: Build artifact'i yükleme
      uses: actions/upload-artifact@v4
      with:
        name: react-build
        path: ./web/build/
        retention-days: 7
    
    - name: Coverage report yükleme
      uses: codecov/codecov-action@v3
      with:
        directory: ./web/coverage
        flags: frontend
        name: react-coverage

  # Python backend test
  backend:
    name: Backend (Python ${{ matrix.python-version }})
    runs-on: ${{ matrix.os }}
    
    strategy:
      fail-fast: false
      matrix:
        os: [ubuntu-latest, windows-latest, macos-latest]
        python-version: ['3.8', '3.9', '3.10', '3.11']
        
    steps:
    - name: Checkout kod
      uses: actions/checkout@v4
    
    - name: Python ${{ matrix.python-version }} kurulumu
      uses: actions/setup-python@v4
      with:
        python-version: ${{ matrix.python-version }}
        cache: 'pip'
    
    - name: Sistem bağımlılıklarını kurma (Linux)
      if: matrix.os == 'ubuntu-latest'
      run: |
        sudo apt-get update
        sudo apt-get install -y \
          libgl1-mesa-glx \
          libegl1-mesa \
          libxrandr2 \
          libxss1 \
          libxcursor1 \
          libxcomposite1 \
          libasound2 \
          libxi6 \
          libxtst6 \
          qt6-base-dev
    
    - name: Python bağımlılıklarını kurma
      run: |
        python -m pip install --upgrade pip
        pip install -e ".[dev,test]"
    
    - name: Code quality kontrolü
      run: |
        flake8 src/ tests/
        black src/ tests/ --check
        isort src/ tests/ --check-only
    
    - name: Type checking (mypy)
      run: mypy src/pypdf_tools/
      continue-on-error: true
    
    - name: Python testleri
      run: |
        pytest tests/ \
          --cov=src/pypdf_tools \
          --cov-report=xml \
          --cov-report=html \
          --junitxml=test-results.xml \
          -v
    
    - name: Test results yükleme
      uses: actions/upload-artifact@v4
      if: always()
      with:
        name: test-results-${{ matrix.os }}-${{ matrix.python-version }}
        path: |
          test-results.xml
          htmlcov/
        retention-days: 7
    
    - name: Coverage report yükleme
      uses: codecov/codecov-action@v3
      with:
        file: ./coverage.xml
        flags: backend-${{ matrix.os }}-${{ matrix.python-version }}
        name: python-coverage

  # Entegrasyon testi (hibrit uygulama)
  integration:
    name: Integration Tests
    runs-on: ubuntu-latest
    needs: [frontend, backend]
    
    steps:
    - name: Checkout kod
      uses: actions/checkout@v4
    
    - name: Python kurulumu
      uses: actions/setup-python@v4
      with:
        python-version: ${{ env.PYTHON_VERSION }}
        cache: 'pip'
    
    - name: Node.js kurulumu
      uses: actions/setup-node@v4
      with:
        node-version: ${{ env.NODE_VERSION }}
        cache: 'npm'
        cache-dependency-path: ./web/package-lock.json
    
    - name: Sistem bağımlılıklarını kurma
      run: |
        sudo apt-get update
        sudo apt-get install -y \
          libgl1-mesa-glx \
          libegl1-mesa \
          xvfb \
          qt6-base-dev
    
    - name: React build artifact'ini indirme
      uses: actions/download-artifact@v4
      with:
        name: react-build
        path: ./web/build/
    
    - name: Bağımlılıkları kurma
      run: |
        cd web && npm ci
        pip install -e ".[dev,test]"
    
    - name: Entegrasyon testleri
      run: |
        xvfb-run -a pytest tests/test_*_integration.py -v
    
    - name: E2E testleri
      run: |
        xvfb-run -a python -m pypdf_tools.main --no-splash tests/fixtures/sample.pdf &
        sleep 5
        # E2E test komutları buraya
        pkill -f pypdf_tools || true
      continue-on-error: true

  # Kod kalitesi ve güvenlik
  code-quality:
    name: Code Quality & Security
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout kod
      uses: actions/checkout@v4
      with:
        fetch-depth: 0  # Sonar için tüm geçmişi çek
    
    - name: Python kurulumu
      uses: actions/setup-python@v4
      with:
        python-version: ${{ env.PYTHON_VERSION }}
    
    - name: Güvenlik taraması (Safety)
      run: |
        pip install safety
        safety check
    
    - name: Dependency vulnerability check
      run: |
        pip install pip-audit
        pip-audit
    
    - name: SonarCloud Scan
      uses: SonarSource/sonarcloud-github-action@master
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        SONAR_TOKEN: ${{ secrets.SONAR_TOKEN }}

  # Package build testi
  build:
    name: Build Package
    runs-on: ubuntu-latest
    needs: [frontend, backend]
    
    steps:
    - name: Checkout kod
      uses: actions/checkout@v4
      with:
        fetch-depth: 0
    
    - name: Python kurulumu
      uses: actions/setup-python@v4
      with:
        python-version: ${{ env.PYTHON_VERSION }}
    
    - name: Node.js kurulumu
      uses: actions/setup-node@v4
      with:
        node-version: ${{ env.NODE_VERSION }}
    
    - name: React build artifact'ini indirme
      uses: actions/download-artifact@v4
      with:
        name: react-build
        path: ./web/build/
    
    - name: Build araçlarını kurma
      run: |
        pip install build wheel twine
    
    - name: Package build
      run: |
        python -m build
    
    - name: Package doğrulama
      run: |
        twine check dist/*
    
    - name: Build artifact'leri yükleme
      uses: actions/upload-artifact@v4
      with:
        name: python-packages
        path: dist/
        retention-days: 30

  # Release işlemleri (sadece tag'ler için)
  release:
    name: Release
    runs-on: ubuntu-latest
    needs: [frontend, backend, integration, build]
    if: startsWith(github.ref, 'refs/tags/v')
    
    steps:
    - name: Checkout kod
      uses: actions/checkout@v4
    
    - name: Build artifact'lerini indirme
      uses: actions/download-artifact@v4
      with:
        name: python-packages
        path: dist/
    
    - name: GitHub Release oluşturma
      uses: softprops/action-gh-release@v1
      with:
        files: dist/*
        generate_release_notes: true
        draft: false
        prerelease: ${{ contains(github.ref, 'alpha') || contains(github.ref, 'beta') || contains(github.ref, 'rc') }}
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
    
    - name: PyPI'ye yayınlama
      uses: pypa/gh-action-pypi-publish@release/v1
      with:
        user: __token__
        password: ${{ secrets.PYPI_API_TOKEN }}
        skip_existing: true

  # Performance & Benchmark testleri
  performance:
    name: Performance Tests
    runs-on: ubuntu-latest
    if: github.event_name == 'push' && github.ref == 'refs/heads/main'
    
    steps:
    - name: Checkout kod
      uses: actions/checkout@v4
    
    - name: Python kurulumu
      uses: actions/setup-python@v4
      with:
        python-version: ${{ env.PYTHON_VERSION }}
    
    - name: Performance test bağımlılıklarını kurma
      run: |
        pip install pytest-benchmark memory-profiler
        pip install -e ".[dev]"
    
    - name: Benchmark testleri
      run: |
        pytest tests/test_performance.py --benchmark-only --benchmark-json=benchmark.json
    
    - name: Benchmark sonuçlarını kaydetme
      uses: benchmark-action/github-action-benchmark@v1
      with:
        tool: 'pytest'
        output-file-path: benchmark.json
        github-token: ${{ secrets.GITHUB_TOKEN }}
        auto-push: true

  # Docker build (opsiyonel)
  docker:
    name: Docker Build
    runs-on: ubuntu-latest
    if: github.event_name == 'push' && (github.ref == 'refs/heads/main' || startsWith(github.ref, 'refs/tags/v'))
    needs: [build]
    
    steps:
    - name: Checkout kod
      uses: actions/checkout@v4
    
    - name: Docker meta bilgileri
      id: meta
      uses: docker/metadata-action@v5
      with:
        images: ghcr.io/${{ github.repository }}
        tags: |
          type=ref,event=branch
          type=semver,pattern={{version}}
          type=semver,pattern={{major}}.{{minor}}
    
    - name: Docker Buildx kurulumu
      uses: docker/setup-buildx-action@v3
    
    - name: Container Registry'ye login
      uses: docker/login-action@v3
      with:
        registry: ghcr.io
        username: ${{ github.actor }}
        password: ${{ secrets.GITHUB_TOKEN }}
    
    - name: Docker image build ve push
      uses: docker/build-push-action@v5
      with:
        context: .
        platforms: linux/amd64,linux/arm64
        push: true
        tags: ${{ steps.meta.outputs.tags }}
        labels: ${{ steps.meta.outputs.labels }}
        cache-from: type=gha
        cache-to: type=gha,mode=max

  # Deployment (staging/production)
  deploy-staging:
    name: Deploy to Staging
    runs-on: ubuntu-latest
    needs: [integration]
    if: github.ref == 'refs/heads/develop'
    environment: staging
    
    steps:
    - name: Staging deployment
      run: |
        echo "Staging deployment yapılacak..."
        # Staging deployment komutları buraya

  deploy-production:
    name: Deploy to Production  
    runs-on: ubuntu-latest
    needs: [release]
    if: startsWith(github.ref, 'refs/tags/v')
    environment: production
    
    steps:
    - name: Production deployment
      run: |
        echo "Production deployment yapılacak..."
        # Production deployment komutları buraya

# Job completion notification
  notify:
    name: Notification
    runs-on: ubuntu-latest
    needs: [frontend, backend, integration, code-quality]
    if: always()
    
    steps:
    - name: Slack notification
      if: ${{ secrets.SLACK_WEBHOOK }}
      uses: 8398a7/action-slack@v3
      with:
        status: ${{ job.status }}
        text: |
          CI/CD Pipeline completed for PyPDF-Tools
          Branch: ${{ github.ref }}
          Commit: ${{ github.sha }}
        webhook_url: ${{ secrets.SLACK_WEBHOOK }}

# Environment değişkenleri ve konfigürasyon
env:
  # Test coverage minimum %80
  COVERAGE_THRESHOLD: 80
  
  # Timeout ayarları  
  PYTEST_TIMEOUT: 300
  NPM_TEST_TIMEOUT: 180
  
  # Cache keys
  PIP_CACHE_KEY: pip-${{ runner.os }}-${{ hashFiles('**/requirements*.txt', 'pyproject.toml') }}
  NPM_CACHE_KEY: npm-${{ runner.os }}-${{ hashFiles('**/package-lock.json') }}

# Concurrency kontrolü - aynı branch için sadece bir pipeline çalışsın
concurrency:
  group: ${{ github.workflow }}-${{ github.ref }}
  cancel-in-progress: true
