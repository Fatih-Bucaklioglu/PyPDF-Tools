name: CI - Continuous Integration

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main, develop ]
  workflow_dispatch:

env:
  PYTHON_VERSION: '3.11'
  NODE_VERSION: '18'

jobs:
  test:
    name: Test Suite
    runs-on: ${{ matrix.os }}
    strategy:
      matrix:
        os: [ubuntu-22.04, windows-2022, macos-12]
        python-version: ['3.8', '3.9', '3.10', '3.11']
        exclude:
          # Reduce matrix size for faster CI
          - os: windows-2022
            python-version: '3.8'
          - os: macos-12
            python-version: '3.8'
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      with:
        fetch-depth: 0
    
    - name: Set up Python ${{ matrix.python-version }}
      uses: actions/setup-python@v4
      with:
        python-version: ${{ matrix.python-version }}
        cache: 'pip'
    
    - name: Set up Node.js
      uses: actions/setup-node@v4
      with:
        node-version: ${{ env.NODE_VERSION }}
        cache: 'npm'
    
    - name: Install system dependencies (Ubuntu)
      if: matrix.os == 'ubuntu-22.04'
      run: |
        sudo apt-get update
        sudo apt-get install -y \
          tesseract-ocr \
          tesseract-ocr-tur \
          tesseract-ocr-eng \
          libreoffice \
          poppler-utils \
          qpdf \
          ghostscript \
          libqt6widgets6 \
          libfuse2
    
    - name: Install system dependencies (macOS)
      if: matrix.os == 'macos-12'
      run: |
        brew update
        brew install tesseract tesseract-lang libreoffice poppler qpdf ghostscript
    
    - name: Install system dependencies (Windows)
      if: matrix.os == 'windows-2022'
      run: |
        choco install tesseract --pre
        choco install libreoffice
        choco install poppler
        choco install qpdf
        choco install ghostscript
    
    - name: Install Python dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -e .[dev,test]
    
    - name: Install Node.js dependencies
      run: npm ci
    
    - name: Run pre-commit hooks
      uses: pre-commit/action@v3.0.0
    
    - name: Run Python linting
      run: |
        flake8 src/ tests/
        black --check src/ tests/
        isort --check-only src/ tests/
    
    - name: Run type checking
      run: mypy src/
    
    - name: Run security scanning
      run: |
        bandit -r src/
        safety check --json
    
    - name: Build application
      run: |
        python build.py --dev
    
    - name: Run unit tests
      run: |
        pytest tests/unit/ -v \
          --cov=pypdf_tools \
          --cov-report=xml \
          --cov-report=html \
          --cov-report=term-missing \
          --cov-fail-under=80
    
    - name: Run integration tests
      run: |
        pytest tests/integration/ -v --slow
    
    - name: Run performance tests
      if: matrix.python-version == '3.11'
      run: |
        pytest tests/performance/ -v --benchmark-only
    
    - name: Upload coverage reports
      if: matrix.os == 'ubuntu-22.04' && matrix.python-version == '3.11'
      uses: codecov/codecov-action@v3
      with:
        file: ./coverage.xml
        flags: unittests
        name: codecov-umbrella
        fail_ci_if_error: true
    
    - name: Upload test artifacts
      if: failure()
      uses: actions/upload-artifact@v3
      with:
        name: test-artifacts-${{ matrix.os }}-${{ matrix.python-version }}
        path: |
          htmlcov/
          test-results/
          logs/
        retention-days: 7

  lint:
    name: Code Quality
    runs-on: ubuntu-22.04
    steps:
    - uses: actions/checkout@v4
    
    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: ${{ env.PYTHON_VERSION }}
    
    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -e .[dev]
    
    - name: Run comprehensive linting
      run: |
        # Python linting
        flake8 src/ tests/ --statistics --tee --output-file=flake8-report.txt
        
        # Code formatting
        black --check --diff src/ tests/
        
        # Import sorting
        isort --check-only --diff src/ tests/
        
        # Docstring linting
        pydocstyle src/
        
        # Dead code detection
        vulture src/ --min-confidence 80
        
        # Complexity analysis
        radon cc src/ --min=B
        radon mi src/ --min=B
    
    - name: Upload lint reports
      if: always()
      uses: actions/upload-artifact@v3
      with:
        name: lint-reports
        path: |
          flake8-report.txt
          .coverage
        retention-days: 7

  security:
    name: Security Scan
    runs-on: ubuntu-22.04
    steps:
    - uses: actions/checkout@v4
    
    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: ${{ env.PYTHON_VERSION }}
    
    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -e .[dev,security]
    
    - name: Run security checks
      run: |
        # Bandit security linter
        bandit -r src/ -f json -o bandit-report.json
        
        # Safety dependency vulnerability scanner
        safety check --json --output safety-report.json
        
        # pip-audit for known vulnerabilities
        pip-audit --format=json --output=pip-audit-report.json
    
    - name: Upload security reports
      if: always()
      uses: actions/upload-artifact@v3
      with:
        name: security-reports
        path: |
          bandit-report.json
          safety-report.json
          pip-audit-report.json
        retention-days: 30

  documentation:
    name: Documentation
    runs-on: ubuntu-22.04
    steps:
    - uses: actions/checkout@v4
    
    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: ${{ env.PYTHON_VERSION }}
    
    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -e .[docs]
    
    - name: Build documentation
      run: |
        cd docs/
        sphinx-build -b html . _build/html -W
        sphinx-build -b linkcheck . _build/linkcheck
    
    - name: Upload documentation
      uses: actions/upload-artifact@v3
      with:
        name: documentation
        path: docs/_build/html/
        retention-days: 7

  docker:
    name: Docker Build
    runs-on: ubuntu-22.04
    steps:
    - uses: actions/checkout@v4
    
    - name: Set up Docker Buildx
      uses: docker/setup-buildx-action@v3
    
    - name: Build Docker image
      run: |
        docker build -t pypdf-tools:test .
        docker run --rm pypdf-tools:test --version
        docker run --rm pypdf-tools:test --system-info

  compatibility:
    name: Compatibility Tests
    runs-on: ubuntu-22.04
    strategy:
      matrix:
        test-type: [pdf-versions, large-files, unicode, legacy-formats]
    
    steps:
    - uses: actions/checkout@v4
    
    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: ${{ env.PYTHON_VERSION }}
    
    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -e .[test]
    
    - name: Run compatibility tests
      run: |
        pytest tests/compatibility/ -v -k "${{ matrix.test-type }}"

  performance:
    name: Performance Benchmarks
    runs-on: ubuntu-22.04
    if: github.event_name != 'pull_request' || contains(github.event.pull_request.labels.*.name, 'benchmark')
    
    steps:
    - uses: actions/checkout@v4
    
    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: ${{ env.PYTHON_VERSION }}
    
    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -e .[test,benchmark]
    
    - name: Download benchmark datasets
      run: |
        python scripts/download_test_data.py --benchmark
    
    - name: Run performance benchmarks
      run: |
        pytest tests/performance/ -v \
          --benchmark-json=benchmark-results.json \
          --benchmark-save=benchmark \
          --benchmark-compare-fail=mean:5%
    
    - name: Upload benchmark results
      uses: actions/upload-artifact@v3
      with:
        name: benchmark-results
        path: |
          benchmark-results.json
          .benchmarks/
        retention-days: 30
    
    - name: Comment benchmark results
      if: github.event_name == 'pull_request'
      uses: benchmark-action/github-action-benchmark@v1
      with:
        tool: 'pytest'
        output-file-path: benchmark-results.json
        github-token: ${{ secrets.GITHUB_TOKEN }}
        comment-on-alert: true

  notify:
    name: Notification
    runs-on: ubuntu-22.04
    needs: [test, lint, security, documentation]
    if: always()
    steps:
    - name: Notify on failure
      if: contains(needs.*.result, 'failure')
      uses: 8398a7/action-slack@v3
      with:
        status: failure
        channel: '#pypdf-tools-ci'
        webhook_url: ${{ secrets.SLACK_WEBHOOK }}
        
    - name: Create issue on failure
      if: contains(needs.*.result, 'failure') && github.ref == 'refs/heads/main'
      uses: actions/github-script@v7
      with:
        script: |
          github.rest.issues.create({
            owner: context.repo.owner,
            repo: context.repo.repo,
            title: `CI Failure - ${context.sha.substring(0, 7)}`,
            body: `CI pipeline failed on main branch.\n\nCommit: ${context.sha}\nRun: ${context.runId}`,
            labels: ['bug', 'ci-failure', 'priority-high']
          })

  cache-cleanup:
    name: Cache Cleanup
    runs-on: ubuntu-22.04
    if: github.event_name == 'schedule'
    steps:
    - name: Cleanup old caches
      uses: actions/github-script@v7
      with:
        script: |
          const caches = await github.rest.actions.getActionsCacheList({
            owner: context.repo.owner,
            repo: context.repo.repo,
            per_page: 100
          })
          
          const oldCaches = caches.data.actions_caches.filter(cache => {
            const age = Date.now() - new Date(cache.created_at).getTime()
            return age > 7 * 24 * 60 * 60 * 1000 // 7 days
          })
          
          for (const cache of oldCaches) {
            await github.rest.actions.deleteActionsCacheById({
              owner: context.repo.owner,
              repo: context.repo.repo,
              cache_id: cache.id
            })
          }
