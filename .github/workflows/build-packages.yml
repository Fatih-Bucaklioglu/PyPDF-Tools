name: Build Platform Packages

on:
  push:
    tags:
      - 'v*'
  workflow_dispatch:
    inputs:
      platforms:
        description: 'Platforms to build (comma-separated: windows,macos,linux)'
        required: true
        default: 'windows,macos,linux'

env:
  PYTHON_VERSION: '3.11'
  NODE_VERSION: '18'

jobs:
  setup:
    name: Setup Build Matrix
    runs-on: ubuntu-22.04
    outputs:
      matrix: ${{ steps.matrix.outputs.result }}
      version: ${{ steps.version.outputs.VERSION }}
    steps:
    - name: Get version
      id: version
      run: |
        if [[ "${{ github.event_name }}" == "workflow_dispatch" ]]; then
          echo "VERSION=dev-$(date +%Y%m%d-%H%M%S)" >> $GITHUB_OUTPUT
        else
          echo "VERSION=${GITHUB_REF#refs/tags/}" >> $GITHUB_OUTPUT
        fi
    
    - name: Setup build matrix
      id: matrix
      uses: actions/github-script@v7
      with:
        script: |
          const platforms = "${{ github.event.inputs.platforms || 'windows,macos,linux' }}".split(',');
          const matrix = [];
          
          if (platforms.includes('windows')) {
            matrix.push({
              os: 'windows-2022',
              platform: 'windows',
              arch: 'x64',
              package_types: ['msi', 'portable', 'chocolatey'],
              python_arch: 'x64'
            });
          }
          
          if (platforms.includes('macos')) {
            matrix.push({
              os: 'macos-12',
              platform: 'macos',
              arch: 'x64',
              package_types: ['dmg', 'pkg', 'homebrew'],
              python_arch: 'x64'
            }, {
              os: 'macos-12',
              platform: 'macos',
              arch: 'arm64',
              package_types: ['dmg', 'pkg'],
              python_arch: 'arm64'
            });
          }
          
          if (platforms.includes('linux')) {
            matrix.push({
              os: 'ubuntu-22.04',
              platform: 'linux',
              arch: 'x64',
              package_types: ['deb', 'rpm', 'tar.gz'],
              python_arch: 'x64'
            });
          }
          
          return { include: matrix };

  build:
    name: Build ${{ matrix.platform }}-${{ matrix.arch }}
    needs: setup
    runs-on: ${{ matrix.os }}
    strategy:
      matrix: ${{ fromJSON(needs.setup.outputs.matrix) }}
      fail-fast: false
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      with:
        fetch-depth: 0
    
    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: ${{ env.PYTHON_VERSION }}
        architecture: ${{ matrix.python_arch }}
    
    - name: Set up Node.js
      uses: actions/setup-node@v4
      with:
        node-version: ${{ env.NODE_VERSION }}
        architecture: ${{ matrix.arch }}
    
    # Windows specific setup
    - name: Setup Windows build environment
      if: matrix.platform == 'windows'
      run: |
        # Install dependencies
        choco install tesseract --pre -y
        choco install libreoffice -y
        choco install nsis -y
        choco install wix -y
        
        # Install Visual C++ Build Tools
        choco install visualstudio2022buildtools --package-parameters "--includeRecommended --includeOptional" -y
    
    # macOS specific setup
    - name: Setup macOS build environment
      if: matrix.platform == 'macos'
      run: |
        brew update
        brew install tesseract tesseract-lang libreoffice create-dmg
        
        # Install signing tools
        if [[ "${{ matrix.arch }}" == "arm64" ]]; then
          echo "Setting up cross-compilation for Apple Silicon"
          export ARCHFLAGS="-arch arm64"
        fi
    
    # Linux specific setup
    - name: Setup Linux build environment
      if: matrix.platform == 'linux'
      run: |
        sudo apt-get update
        sudo apt-get install -y \
          tesseract-ocr tesseract-ocr-all \
          libreoffice \
          build-essential \
          fakeroot \
          alien \
          rpm
    
    - name: Install Python dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -e .[all]
        pip install pyinstaller[encryption]
        pip install auto-py-to-exe  # For GUI builds
    
    - name: Install Node.js dependencies
      run: npm ci
    
    - name: Build application
      run: |
        python build.py --platform ${{ matrix.platform }} --arch ${{ matrix.arch }} --release
    
    # Windows packages
    - name: Build Windows MSI
      if: matrix.platform == 'windows' && contains(matrix.package_types, 'msi')
      run: |
        # Build MSI using WiX
        python scripts/build_msi.py --version ${{ needs.setup.outputs.version }}
    
    - name: Build Windows Portable
      if: matrix.platform == 'windows' && contains(matrix.package_types, 'portable')
      run: |
        python scripts/build_portable.py --platform windows --arch ${{ matrix.arch }}
    
    - name: Prepare Chocolatey package
      if: matrix.platform == 'windows' && contains(matrix.package_types, 'chocolatey')
      run: |
        python scripts/build_chocolatey.py --version ${{ needs.setup.outputs.version }}
    
    # macOS packages
    - name: Build macOS DMG
      if: matrix.platform == 'macos' && contains(matrix.package_types, 'dmg')
      run: |
        python scripts/build_dmg.py --arch ${{ matrix.arch }} --version ${{ needs.setup.outputs.version }}
        
        # Sign DMG if certificates available
        if [[ -n "${{ secrets.APPLE_DEVELOPER_ID }}" ]]; then
          codesign --force --verify --verbose --sign "${{ secrets.APPLE_DEVELOPER_ID }}" "dist/PyPDF Tools v2.dmg"
          
          # Notarize
          xcrun notarytool submit "dist/PyPDF Tools v2.dmg" \
            --apple-id "${{ secrets.APPLE_ID }}" \
            --password "${{ secrets.APPLE_PASSWORD }}" \
            --team-id "${{ secrets.APPLE_TEAM_ID }}" \
            --wait
        fi
    
    - name: Build macOS PKG
      if: matrix.platform == 'macos' && contains(matrix.package_types, 'pkg')
      run: |
        python scripts/build_pkg.py --arch ${{ matrix.arch }} --version ${{ needs.setup.outputs.version }}
    
    - name: Prepare Homebrew formula
      if: matrix.platform == 'macos' && contains(matrix.package_types, 'homebrew')
      run: |
        python scripts/build_homebrew.py --version ${{ needs.setup.outputs.version }}
    
    # Linux packages
    - name: Build Debian package
      if: matrix.platform == 'linux' && contains(matrix.package_types, 'deb')
      run: |
        python scripts/build_deb.py --version ${{ needs.setup.outputs.version }}
        
        # Test installation
        sudo dpkg -i dist/*.deb || true
        sudo apt-get install -f -y
    
    - name: Build RPM package
      if: matrix.platform == 'linux' && contains(matrix.package_types, 'rpm')
      run: |
        # Convert DEB to RPM
        sudo alien --to-rpm --scripts dist/*.deb
        mv *.rpm dist/
    
    - name: Build TAR.GZ archive
      if: matrix.platform == 'linux' && contains(matrix.package_types, 'tar.gz')
      run: |
        python scripts/build_tarball.py --version ${{ needs.setup.outputs.version }}
    
    - name: Generate checksums
      run: |
        cd dist/
        find . -type f \( -name "*.msi" -o -name "*.dmg" -o -name "*.pkg" -o -name "*.deb" -o -name "*.rpm" -o -name "*.tar.gz" -o -name "*.zip" \) -exec sha256sum {} \; > checksums-${{ matrix.platform }}-${{ matrix.arch }}.txt
        find . -type f \( -name "*.msi" -o -name "*.dmg" -o -name "*.pkg" -o -name "*.deb" -o -name "*.rpm" -o -name "*.tar.gz" -o -name "*.zip" \) -exec md5sum {} \; >> checksums-${{ matrix.platform }}-${{ matrix.arch }}.txt
    
    - name: Test packages
      run: |
        python scripts/test_packages.py --platform ${{ matrix.platform }} --arch ${{ matrix.arch }}
    
    - name: Upload build artifacts
      uses: actions/upload-artifact@v3
      with:
        name: packages-${{ matrix.platform }}-${{ matrix.arch }}
        path: |
          dist/
          !dist/build/
          !dist/temp/
        retention-days: 30

  test-packages:
    name: Test Packages
    needs: [setup, build]
    runs-on: ${{ matrix.test_os }}
    strategy:
      matrix:
        include:
          - test_os: windows-2022
            platform: windows
            package_type: msi
          - test_os: windows-2022
            platform: windows  
            package_type: portable
          - test_os: macos-12
            platform: macos
            package_type: dmg
          - test_os: ubuntu-22.04
            platform: linux
            package_type: deb
          - test_os: fedora:latest
            platform: linux
            package_type: rpm
    
    steps:
    - name: Download packages
      uses: actions/download-artifact@v3
      with:
        name: packages-${{ matrix.platform }}-x64
    
    - name: Test Windows MSI
      if: matrix.platform == 'windows' && matrix.package_type == 'msi'
      run: |
        # Install MSI silently
        msiexec /i "*.msi" /quiet /norestart
        
        # Test installation
        & "C:\Program Files\PyPDF Tools v2\PyPDF-Tools.exe" --version
        & "C:\Program Files\PyPDF Tools v2\PyPDF-Tools.exe" --system-info
        
        # Uninstall
        msiexec /x "*.msi" /quiet /norestart
    
    - name: Test Windows Portable
      if: matrix.platform == 'windows' && matrix.package_type == 'portable'
      run: |
        # Extract portable
        Expand-Archive -Path "*.zip" -DestinationPath "portable/"
        
        # Test execution
        .\portable\PyPDF-Tools.exe --version
        .\portable\PyPDF-Tools.exe --system-info
    
    - name: Test macOS DMG
      if: matrix.platform == 'macos' && matrix.package_type == 'dmg'
      run: |
        # Mount DMG
        hdiutil attach "*.dmg"
        
        # Test application
        "/Volumes/PyPDF Tools v2/PyPDF Tools v2.app/Contents/MacOS/PyPDF-Tools" --version
        
        # Unmount
        hdiutil detach "/Volumes/PyPDF Tools v2"
    
    - name: Test Linux DEB
      if: matrix.platform == 'linux' && matrix.package_type == 'deb'
      run: |
        # Install DEB
        sudo dpkg -i *.deb
        sudo apt-get install -f -y
        
        # Test installation
        pypdf-tools --version
        pypdf-tools --system-info
        
        # Test file association
        echo "Testing file associations..."
        xdg-mime query filetype test.pdf || true
    
    - name: Test Linux RPM (Fedora)
      if: matrix.platform == 'linux' && matrix.package_type == 'rpm'
      run: |
        # Run in Fedora container
        docker run --rm -v $(pwd):/workspace -w /workspace fedora:latest bash -c "
          dnf install -y *.rpm
          pypdf-tools --version
          pypdf-tools --system-info
        "

  create-release:
    name: Create Release
    needs: [setup, build, test-packages]
    runs-on: ubuntu-22.04
    if: github.event_name == 'push' && startsWith(github.ref, 'refs/tags/')
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      with:
        fetch-depth: 0
    
    - name: Download all packages
      uses: actions/download-artifact@v3
      with:
        path: packages/
    
    - name: Organize release assets
      run: |
        mkdir -p release-assets
        
        # Copy all packages to release directory
        find packages/ -type f \( -name "*.msi" -o -name "*.dmg" -o -name "*.pkg" -o -name "*.deb" -o -name "*.rpm" -o -name "*.tar.gz" -o -name "*.zip" \) -exec cp {} release-assets/ \;
        
        # Copy checksums
        find packages/ -name "checksums-*.txt" -exec cp {} release-assets/ \;
        
        # Generate combined checksums
        cd release-assets/
        sha256sum * > SHA256SUMS.txt
        md5sum * > MD5SUMS.txt
    
    - name: Generate release notes
      id: release-notes
      run: |
        python scripts/generate_release_notes.py --version ${{ needs.setup.outputs.version }} > release-notes.md
    
    - name: Create GitHub Release
      uses: softprops/action-gh-release@v1
      with:
        files: release-assets/*
        body_path: release-notes.md
        draft: false
        prerelease: ${{ contains(needs.setup.outputs.version, 'alpha') || contains(needs.setup.outputs.version, 'beta') || contains(needs.setup.outputs.version, 'rc') }}
        generate_release_notes: true
        discussion_category_name: Releases
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

  publish-packages:
    name: Publish to Package Managers
    needs: [setup, create-release]
    runs-on: ubuntu-22.04
    if: github.event_name == 'push' && startsWith(github.ref, 'refs/tags/') && !contains(needs.setup.outputs.version, 'alpha') && !contains(needs.setup.outputs.version, 'beta')
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
    
    - name: Download packages
      uses: actions/download-artifact@v3
      with:
        path: packages/
    
    - name: Publish to Chocolatey
      if: contains(github.event.inputs.platforms, 'windows') || github.event.inputs.platforms == ''
      env:
        CHOCOLATEY_API_KEY: ${{ secrets.CHOCOLATEY_API_KEY }}
      run: |
        # Find Chocolatey package
        CHOCO_PACKAGE=$(find packages/ -name "*.nupkg" | head -1)
        if [[ -n "$CHOCO_PACKAGE" ]]; then
          choco push "$CHOCO_PACKAGE" --api-key "$CHOCOLATEY_API_KEY"
        fi
    
    - name: Publish to Homebrew
      if: contains(github.event.inputs.platforms, 'macos') || github.event.inputs.platforms == ''
      env:
        HOMEBREW_GITHUB_API_TOKEN: ${{ secrets.HOMEBREW_TOKEN }}
      run: |
        # Update Homebrew formula
        FORMULA_FILE=$(find packages/ -name "*.rb" | head -1)
        if [[ -n "$FORMULA_FILE" ]]; then
          # Clone tap repository
          git clone https://github.com/Fatih-Bucaklioglu/homebrew-pypdf-tools.git
          cd homebrew-pypdf-tools
          
          # Update formula
          cp "$FORMULA_FILE" Formula/pypdf-tools.rb
          
          # Commit and push
          git config user.name "GitHub Actions"
          git config user.email "actions@github.com"
          git add Formula/pypdf-tools.rb
          git commit -m "Update PyPDF-Tools to ${{ needs.setup.outputs.version }}"
          git push
        fi
    
    - name: Publish to AUR
      if: contains(github.event.inputs.platforms, 'linux') || github.event.inputs.platforms == ''
      env:
        AUR_PRIVATE_KEY: ${{ secrets.AUR_PRIVATE_KEY }}
      run: |
        # Setup SSH for AUR
        mkdir -p ~/.ssh
        echo "$AUR_PRIVATE_KEY" > ~/.ssh/aur_rsa
        chmod 600 ~/.ssh/aur_rsa
        ssh-keyscan -t rsa aur.archlinux.org >> ~/.ssh/known_hosts
        
        # Clone AUR package
        git clone ssh://aur@aur.archlinux.org/pypdf-tools.git aur-pypdf-tools
        cd aur-pypdf-tools
        
        # Update PKGBUILD
        python ../scripts/update_aur_pkgbuild.py --version ${{ needs.setup.outputs.version }}
        
        # Generate .SRCINFO
        makepkg --printsrcinfo > .SRCINFO
        
        # Commit and push
        git config user.name "GitHub Actions"
        git config user.email "actions@github.com"
        git add PKGBUILD .SRCINFO
        git commit -m "Update to ${{ needs.setup.outputs.version }}"
        git push

  notify-release:
    name: Notify Release
    needs: [setup, create-release, publish-packages]
    runs-on: ubuntu-22.04
    if: always() && needs.create-release.result == 'success'
    
    steps:
    - name: Notify Discord
      uses: sarisia/actions-status-discord@v1
      with:
        webhook: ${{ secrets.DISCORD_WEBHOOK }}
        title: "🚀 PyPDF-Tools ${{ needs.setup.outputs.version }} Released!"
        description: |
          New version of PyPDF-Tools has been released with platform packages.
          
          **Download Links:**
          - [GitHub Releases](https://github.com/Fatih-Bucaklioglu/PyPDF-Tools/releases/latest)
          - [Windows MSI](https://github.com/Fatih-Bucaklioglu/PyPDF-Tools/releases/latest/download/PyPDF-Tools-Setup.msi)
          - [macOS DMG](https://github.com/Fatih-Bucaklioglu/PyPDF-Tools/releases/latest/download/PyPDF-Tools.dmg)
          - [Linux DEB](https://github.com/Fatih-Bucaklioglu/PyPDF-Tools/releases/latest/download/pypdf-tools.deb)
        color: 0x00ff00
    
    - name: Notify Slack
      uses: 8398a7/action-slack@v3
      with:
        status: success
        channel: '#releases'
        webhook_url: ${{ secrets.SLACK_WEBHOOK }}
        custom_payload: |
          {
            "text": "🚀 PyPDF-Tools ${{ needs.setup.outputs.version }} has been released!",
            "blocks": [
              {
                "type": "section",
                "text": {
                  "type": "mrkdwn",
                  "text": "*PyPDF-Tools ${{ needs.setup.outputs.version }}* has been released!\n\n:package: Available on all platforms\n:arrow_down: <https://github.com/Fatih-Bucaklioglu/PyPDF-Tools/releases/latest|Download Now>"
                }
              }
            ]
          }
    
    - name: Update website
      env:
        WEBSITE_DEPLOY_KEY: ${{ secrets.WEBSITE_DEPLOY_KEY }}
      run: |
        # Update website with new release info
        if [[ -n "$WEBSITE_DEPLOY_KEY" ]]; then
          mkdir -p ~/.ssh
          echo "$WEBSITE_DEPLOY_KEY" > ~/.ssh/deploy_key
          chmod 600 ~/.ssh/deploy_key
          
          # Clone website repository
          GIT_SSH_COMMAND="ssh -i ~/.ssh/deploy_key -o StrictHostKeyChecking=no" \
            git clone git@github.com:Fatih-Bucaklioglu/pypdf-tools-website.git
          
          cd pypdf-tools-website
          
          # Update version info
          echo "${{ needs.setup.outputs.version }}" > latest-version.txt
          
          # Commit and push
          git config user.name "GitHub Actions"
          git config user.email "actions@github.com"
          git add latest-version.txt
          git commit -m "Update to version ${{ needs.setup.outputs.version }}"
          GIT_SSH_COMMAND="ssh -i ~/.ssh/deploy_key -o StrictHostKeyChecking=no" git push
        fi

  cleanup:
    name: Cleanup Build Environment
    needs: [setup, build, test-packages, create-release]
    runs-on: ubuntu-22.04
    if: always()
    
    steps:
    - name: Clean up artifacts
      run: |
        echo "Cleanup completed - GitHub will automatically clean artifacts based on retention policy"
    
    - name: Report build statistics
      uses: actions/github-script@v7
      with:
        script: |
          const { data: artifacts } = await github.rest.actions.listWorkflowRunArtifacts({
            owner: context.repo.owner,
            repo: context.repo.repo,
            run_id: context.runId,
          });
          
          const totalSize = artifacts.artifacts.reduce((sum, artifact) => sum + artifact.size_in_bytes, 0);
          const sizeMB = (totalSize / (1024 * 1024)).toFixed(2);
          
          console.log(`Build Statistics:`);
          console.log(`- Total artifacts: ${artifacts.artifacts.length}`);
          console.log(`- Total size: ${sizeMB} MB`);
          console.log(`- Version: ${{ needs.setup.outputs.version }}`);
          
          // Create summary
          await core.summary
            .addHeading('Build Summary')
            .addTable([
              [{data: 'Metric', header: true}, {data: 'Value', header: true}],
              ['Version', '${{ needs.setup.outputs.version }}'],
              ['Artifacts Created', artifacts.artifacts.length.toString()],
              ['Total Size', `${sizeMB} MB`],
              ['Platforms Built', '${{ github.event.inputs.platforms || "windows,macos,linux" }}']
            ])
            .write();
